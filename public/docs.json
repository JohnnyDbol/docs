[
    {
        "title": "Application",
        "description": "This class represents the Live application. It is reachable by the root\n        pathlive_app.",
        "canonicalPath": "live_app",
        "Children": [
            {
                "title": "view",
                "type": "Application.View",
                "access": [
                    "get"
                ],
                "description": ""
            },
            {
                "title": "control_surfaces",
                "type": "list ofControlSurface",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "A list of the control surfaces currently selected in Live's\n                Preferences.\n                \n\n                If None is selected in any of the slots or the script is inactive\n                (e.g. when Push2 is selected,\n                but no Push is connected), id 0 will be returned at those indices."
            }
        ],
        "Properties": [
            {
                "title": "current_dialog_button_count",
                "type": "int",
                "access": [
                    "get"
                ],
                "description": "The number of buttons in the current message box."
            },
            {
                "title": "current_dialog_message",
                "type": "symbol",
                "access": [
                    "get"
                ],
                "description": "The text of the current message box (empty if no message box is\n                currently shown)."
            },
            {
                "title": "open_dialog_count",
                "type": "int",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "The number of dialog boxes shown."
            },
            {
                "title": "average_process_usage",
                "type": "float",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "Reports Live's average CPU load.\n\n                \n\n                Note that Live's CPU meter shows the audio processing load but not\n                Live's overall CPU usage."
            },
            {
                "title": "peak_process_usage",
                "type": "float",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "Reports Live's peak CPU load.\n\n                \n\n                Note that Live's CPU meter shows the audio processing load but not\n                Live's overall CPU usage."
            }
        ],
        "Functions": [
            {
                "title": "get_bugfix_version",
                "description": "Returns: the 2 in Live 9.1.2."
            },
            {
                "title": "get_document",
                "description": "Returns: the current Live Set."
            },
            {
                "title": "get_major_version",
                "description": "Returns: the 9 in Live 9.1.2."
            },
            {
                "title": "get_minor_version",
                "description": "Returns: the 1 in Live 9.1.2."
            },
            {
                "title": "get_version_string",
                "description": "Returns: the text 9.1.2 in Live 9.1.2."
            },
            {
                "title": "press_current_dialog_button",
                "description": "Parameter:indexPress the button with the given index in the current dialog box."
            }
        ]
    },
    {
        "title": "Application.View",
        "description": "This class represents the aspects of the Live application related to\n        viewing the application.",
        "canonicalPath": "live_app view",
        "Children": [],
        "Properties": [
            {
                "title": "browse_mode",
                "type": "bool",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "1 = Hot-Swap Mode is active for any target."
            },
            {
                "title": "focused_document_view",
                "type": "unicode",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "The name of the currently visible view in the focused Live window\n                ('Session' or 'Arranger')."
            }
        ],
        "Functions": [
            {
                "title": "available_main_views",
                "description": "Returns:view names[list of symbols].\n                \n\n                This is a constant list of view names to be used\n                as an argument when calling other functions:Browser\n                    Arranger Session Detail Detail/Clip Detail/DeviceChain."
            },
            {
                "title": "focus_view",
                "description": "Parameter:view_nameShows named view and focuses on it. You can also pass an empty\n                view_name \u201c \", which refers to the Arrangement or Session View\n                (whichever is visible in the main window)."
            },
            {
                "title": "hide_view",
                "description": "Parameter:view_nameHides the named view. You can also pass an empty view_name \u201c \",\n                which refers to the Arrangement or Session View (whichever is\n                visible in the main window)."
            },
            {
                "title": "is_view_visible",
                "description": "Parameter:view_nameReturns: [bool] Whether the specified view is currently visible."
            },
            {
                "title": "scroll_view",
                "description": "Parameters:direction view_name modifier_presseddirection[int] is 0 = up, 1 = down, 2 = left, 3 = rightmodifier_pressed[bool] If view_name is \"Arranger\" and modifier_pressed is 1 and\n                direction is left or right, then the size of the selected time\n                region is modified, otherwise the position of the playback cursor is\n                moved.\n                \n\n                Not all views are scrollable, and not in all directions. Currently,\n                only theArranger,Browser,Session, andDetail/DeviceChainviews can be scrolled.\n                \n\n                You can also pass an empty view_name\" \", which refers to the Arrangement or Session View (whichever view is\n                visible)."
            },
            {
                "title": "show_view",
                "description": "Parameter:view_name"
            },
            {
                "title": "toggle_browse",
                "description": "Displays the device chain and the browser and activates Hot-Swap\n                Mode for the\n                selected device. Calling this function again deactivates Hot-Swap\n                Mode."
            },
            {
                "title": "zoom_view",
                "description": "Parameter:direction view_name modifier_presseddirection[int] - 0 = up, 1 = down, 2 = left, 3 = rightmodifier_pressed[bool] Ifview_nameis 'Arrangement',modifier_pressedis 1,\n                anddirectionis left or right, then\n                the size of the selected time region is modified, otherwise the\n                position of the playback cursor is moved. Ifview_nameis\n                Arrangement andmodifier_pressedis 1\n                anddirectionis up or down, then only the height of the highlighted track is\n                changed, otherwise the height of all tracks is changed.\n                \n\n                Only the Arrangement and Session Views can be zoomed. For Session\n                View, the behaviour of zoom_view is identical to scroll_view.\n                You can also pass an empty view_name \u201c \", which refers to the\n                Arrangement or Session View (whichever is visible in the main\n                window)."
            }
        ]
    },
    {
        "title": "Song",
        "description": "This class represents a Live Set. The current Live Set is reachable by\n        the root pathlive_set.",
        "canonicalPath": "live_set",
        "Children": [
            {
                "title": "cue_points",
                "type": "list ofCuePoint",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "Cue points are the markers in the Arrangement to\n                which you can jump."
            },
            {
                "title": "return_tracks",
                "type": "list ofTrack",
                "access": [
                    "get",
                    "observe"
                ],
                "description": ""
            },
            {
                "title": "scenes",
                "type": "list ofScene",
                "access": [
                    "get",
                    "observe"
                ],
                "description": ""
            },
            {
                "title": "tracks",
                "type": "list ofTrack",
                "access": [
                    "get",
                    "observe"
                ],
                "description": ""
            },
            {
                "title": "visible_tracks",
                "type": "list ofTrack",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "A track is visible if it's not part of a folded group. If a track is\n                scrolled out of view it's still considered visible."
            },
            {
                "title": "master_track",
                "type": "Track",
                "access": [
                    "get"
                ],
                "description": ""
            },
            {
                "title": "view",
                "type": "Song.View",
                "access": [
                    "get"
                ],
                "description": ""
            },
            {
                "title": "groove_pool",
                "type": "GroovePool",
                "access": [
                    "get"
                ],
                "description": "Live's groove pool.Available since Live 11.0."
            }
        ],
        "Properties": [
            {
                "title": "appointed_device",
                "type": "Device",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "The appointed device is the one used by a control surface unless the\n                control surface itself chooses which device to use. It is marked by\n                a blue hand."
            },
            {
                "title": "arrangement_overdub",
                "type": "bool",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "Get/set the state of the MIDI Arrangement Overdub button."
            },
            {
                "title": "back_to_arranger",
                "type": "bool",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "Get/set the current state of the Back to Arrangement button located\n                in Live's transport bar (1 = highlighted). This button is\n                used to indicate that the current state of the playback differs from\n                what is stored in the Arrangement."
            },
            {
                "title": "can_capture_midi",
                "type": "bool",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "1 = Recently played MIDI material exists that can be captured into a\n                Live Track. Seecapture_midi."
            },
            {
                "title": "can_jump_to_next_cue",
                "type": "bool",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "0 = there is no cue\n                point to the right of the current one, or none at all."
            },
            {
                "title": "can_jump_to_prev_cue",
                "type": "bool",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "0 = there is no cue\n                point to the left of the current one, or none at all."
            },
            {
                "title": "can_redo",
                "type": "bool",
                "access": [
                    "get"
                ],
                "description": "1 = there is something in the history to redo."
            },
            {
                "title": "can_undo",
                "type": "bool",
                "access": [
                    "get"
                ],
                "description": "1 = there is something in the history to undo."
            },
            {
                "title": "clip_trigger_quantization",
                "type": "int",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "Reflects the quantization setting in the transport bar.\n                \n\n                0 = None\n                \n\n                1 = 8 Bars\n                \n\n                2 = 4 Bars\n                \n\n                3 = 2 Bars\n                \n\n                4 = 1 Bar\n                \n\n                5 = 1/2\n                \n\n                6 = 1/2T\n                \n\n                7 = 1/4\n                \n\n                8 = 1/4T\n                \n\n                9 = 1/8\n                \n\n                10 = 1/8T\n                \n\n                11 = 1/16\n                \n\n                12 = 1/16T\n                \n\n                13 = 1/32"
            },
            {
                "title": "count_in_duration",
                "type": "int",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "The duration of the Metronome's Count-In setting as an index, mapped\n                as follows:\n                \n\n                0 = None\n                \n\n                1 = 1 Bar\n                \n\n                2 = 2 Bars\n                \n\n                3 = 4 Bars"
            },
            {
                "title": "current_song_time",
                "type": "float",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "The playing position in the Live Set, in beats."
            },
            {
                "title": "exclusive_arm",
                "type": "bool",
                "access": [
                    "get"
                ],
                "description": "Current status of the exclusive Arm option set in the Live\n                preferences."
            },
            {
                "title": "exclusive_solo",
                "type": "bool",
                "access": [
                    "get"
                ],
                "description": "Current status of the exclusive Solo option set in the Live\n                preferences."
            },
            {
                "title": "groove_amount",
                "type": "float",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "The groove amount from the current set's groove\n                pool (0. - 1.0)."
            },
            {
                "title": "is_counting_in",
                "type": "bool",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "1 = the Metronome is currently counting in."
            },
            {
                "title": "is_playing",
                "type": "bool",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "Get/set if Live's transport is running."
            },
            {
                "title": "last_event_time",
                "type": "float",
                "access": [
                    "get"
                ],
                "description": "The beat time of the last event (i.e. automation breakpoint, clip\n                end, cue point, loop end) in the Arrangement."
            },
            {
                "title": "loop",
                "type": "bool",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "Get/set the enabled state of the Arrangement\n                loop."
            },
            {
                "title": "loop_length",
                "type": "float",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "Arrangement loop length in beats."
            },
            {
                "title": "loop_start",
                "type": "float",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "Arrangement loop start in beats."
            },
            {
                "title": "metronome",
                "type": "bool",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "Get/set the enabled state of the metronome."
            },
            {
                "title": "is_ableton_link_enabled",
                "type": "bool",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "Enable/disable Ableton Link. The Link toggle in\n                the Live's transport bar must be visible to enable Link."
            },
            {
                "title": "is_ableton_link_start_stop_sync_enabled",
                "type": "bool",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "Enable/disable Ableton Link Start Stop Sync."
            },
            {
                "title": "midi_recording_quantization",
                "type": "int",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "Get/set the current Record Quantization value.\n                \n\n                0 = None\n                \n\n                1 = 1/4\n                \n\n                2 = 1/8\n                \n\n                3 = 1/8T\n                \n\n                4 = 1/8 + 1/8T\n                \n\n                5 = 1/16\n                \n\n                6 = 1/16T\n                \n\n                7 = 1/16 + 1/16T\n                \n\n                8 = 1/32"
            },
            {
                "title": "nudge_down",
                "type": "bool",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "1 = the Tempo Nudge Down button in the transport\n                bar is currently pressed."
            },
            {
                "title": "nudge_up",
                "type": "bool",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "1 = the Tempo Nudge Up button in the transport\n                bar is currently pressed."
            },
            {
                "title": "tempo_follower_enabled",
                "type": "bool",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "1 = the Tempo Follower controls the tempo. The\n                Tempo Follower Toggle must be made visible in the preferences for\n                this property to be effective."
            },
            {
                "title": "overdub",
                "type": "bool",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "1 = MIDI Arrangement Overdub is enabled in the\n                transport."
            },
            {
                "title": "punch_in",
                "type": "bool",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "1 = the Punch-In button is enabled in the\n                transport."
            },
            {
                "title": "punch_out",
                "type": "bool",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "1 = the Punch-Out button is enabled in the\n                transport."
            },
            {
                "title": "re_enable_automation_enabled",
                "type": "bool",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "1 = the Re-Enable Automation button is on."
            },
            {
                "title": "record_mode",
                "type": "bool",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "1 = the Arrangement Record button is on."
            },
            {
                "title": "root_note",
                "type": "int",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "The root note of the song used for control surfaces. The root note\n                can be a number between 0 and 11, where 0 = C and 11 = B."
            },
            {
                "title": "scale_name",
                "type": "unicode",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "The name of Live's current scale.\n\n                \n\n                The global scale in Live is not visible in the Live UI but it is\n                synchronized with Push, and with the clip that is currently focused\n                in Live. Making a clip active in the Clip View by focussing it sets\n                the global scale if that clip's scale setting is ON. This same\n                global scale can also be changed from Push."
            },
            {
                "title": "scale_intervals",
                "type": "list",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "A list of integers representing the intervals in Live's current\n                scale (seescale_name). Expressed as the interval between\n                the first scale degree and the scale degree at the list index."
            },
            {
                "title": "select_on_launch",
                "type": "bool",
                "access": [
                    "get"
                ],
                "description": "1 = the \"Select on Launch\" option is set in Live's\n                preferences."
            },
            {
                "title": "session_automation_record",
                "type": "bool",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "The state of the Automation Arm button."
            },
            {
                "title": "session_record",
                "type": "bool",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "The state of the Session Overdub button."
            },
            {
                "title": "session_record_status",
                "type": "int",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "Reflects the state of the Session Record button."
            },
            {
                "title": "signature_denominator",
                "type": "int",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": ""
            },
            {
                "title": "signature_numerator",
                "type": "int",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": ""
            },
            {
                "title": "song_length",
                "type": "float",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "A little more thanlast_event_time, in beats."
            },
            {
                "title": "start_time",
                "type": "float",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "The position in the Live Set where playing will\n                start, in beats."
            },
            {
                "title": "swing_amount",
                "type": "float",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "Range: 0.0 - 1.0; affects MIDI Recording Quantization and all direct\n                calls toClip.quantize."
            },
            {
                "title": "tempo",
                "type": "float",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "Current tempo of the Live Set in BPM, 20.0 ... 999.0. The tempo may\n                be automated, so it can change depending on the current song time."
            }
        ],
        "Functions": [
            {
                "title": "capture_and_insert_scene",
                "description": "Capture the currently playing clips and insert them as a new scene\n                below the selected scene."
            },
            {
                "title": "capture_midi",
                "description": "Parameter:destination[int]\n                \n\n                0 = auto, 1 = session, 2 = arrangement\n                \n\n                Capture recently played MIDI material from audible tracks into a\n                Live Clip.\n                \n\n                Ifdestinatonis not set or it is set toauto, the\n                Clip is inserted\n                into the view currently visible in the focused Live window.\n                Otherwise, it is inserted\n                into the specified view."
            },
            {
                "title": "continue_playing",
                "description": "From the current playback position."
            },
            {
                "title": "create_audio_track",
                "description": "Parameter:indexIndex determines where the track is added, it is only valid between\n                0 and\n                len(song.tracks). Using an index of -1 will add the new track at the\n                end of the list."
            },
            {
                "title": "create_midi_track",
                "description": "Parameter:indexIndex determines where the track is added, it is only valid between\n                0 and\n                len(song.tracks). Using an index of -1 will add the new track at the\n                end of the list."
            },
            {
                "title": "create_return_track",
                "description": "Adds a new return track at the end."
            },
            {
                "title": "create_scene",
                "description": "Parameter:indexReturns: The new scene\n                \n\n                Index determines where the scene is added. It is only valid between\n                0 and\n                len(song.scenes). Using an index of -1 will add the new scene at the\n                end of the list."
            },
            {
                "title": "delete_scene",
                "description": "Parameter:indexDelete the scene at the given index."
            },
            {
                "title": "delete_track",
                "description": "Parameter:indexDelete the track at the given index."
            },
            {
                "title": "delete_return_track",
                "description": "Parameter:indexDelete the return track at the given index."
            },
            {
                "title": "duplicate_scene",
                "description": "Parameter:indexIndex determines which scene to duplicate."
            },
            {
                "title": "duplicate_track",
                "description": "Parameter:indexIndex determines which track to duplicate."
            },
            {
                "title": "find_device_position",
                "description": "Parameter:device[live object]target[live object]target\n                        position[int]\n                \n\n                Returns:\n                \n\n                [int] The position in the target's chain where the device can be\n                inserted that is the closest possible to the target position."
            },
            {
                "title": "force_link_beat_time",
                "description": "Force the Link timeline to jump to Live's current beat time."
            },
            {
                "title": "get_beats_loop_length",
                "description": "Returns:bars.beats.sixteenths.ticks[symbol]\n                \n\n                The Arrangement loop length."
            },
            {
                "title": "get_beats_loop_start",
                "description": "Returns:bars.beats.sixteenths.ticks[symbol]\n                \n\n                The Arrangement loop start."
            },
            {
                "title": "get_current_beats_song_time",
                "description": "Returns:bars.beats.sixteenths.ticks[symbol]\n                \n\n                The current Arrangement playback position."
            },
            {
                "title": "get_current_smpte_song_time",
                "description": "Parameter:formatformat[int] is the time code type to be returned\n                \n\n                0 = the frame position shows the milliseconds\n                \n\n                1 = Smpte24\n                \n\n                2 = Smpte25\n                \n\n                3 = Smpte30\n                \n\n                4 = Smpte30Drop\n                \n\n                5 = Smpte29\n                \n\n                Returns:hours:min:sec:frames[symbol]\n                \n\n                The current Arrangement playback position."
            },
            {
                "title": "is_cue_point_selected",
                "description": "Returns: bool 1 = the current Arrangement\n                playback position is at a cue point"
            },
            {
                "title": "jump_by",
                "description": "Parameter:beatsbeats[double] is the amount to jump relatively to the current position"
            },
            {
                "title": "jump_to_next_cue",
                "description": "Jump to the right, if possible."
            },
            {
                "title": "jump_to_prev_cue",
                "description": "Jump to the left, if possible."
            },
            {
                "title": "move_device",
                "description": "Parameter:device[live object]target[live object]target\n                        position[int]\n                \n\n                Returns: [int] The position in the target's chain where the device\n                was inserted.\n                \n\n                Move the device to the specified position in the target chain. If\n                the device cannot be moved to the specified position, the nearest\n                possible\n                position is chosen."
            },
            {
                "title": "play_selection",
                "description": "Do nothing if no selection is set in\n                Arrangement, or play the current selection."
            },
            {
                "title": "re_enable_automation",
                "description": "Trigger 'Re-Enable Automation', re-activating automation in all\n                running Session clips."
            },
            {
                "title": "redo",
                "description": "Causes the Live application to redo the last\n                operation."
            },
            {
                "title": "scrub_by",
                "description": "Parameter:beatsbeats[double] the amount to scrub relative to the current Arrangement\n                playback position\n                \n\n                Same asjump_by, at the moment."
            },
            {
                "title": "set_or_delete_cue",
                "description": "Toggle cue point at current Arrangement playback\n                position."
            },
            {
                "title": "start_playing",
                "description": "Start playback from the insert marker."
            },
            {
                "title": "stop_all_clips",
                "description": "Parameter (optional):quantizedCalling the function with 0 will stop all clips immediately,\n                independent of\n                the launch quantization. The default is '1'."
            },
            {
                "title": "stop_playing",
                "description": "Stop the playback."
            },
            {
                "title": "tap_tempo",
                "description": "Same as pressing the Tap Tempo button in the transport bar. The new\n                tempo\n                is calculated based on the time between subsequent calls of this\n                function."
            },
            {
                "title": "trigger_session_record",
                "description": "Parameter:record_length (optional)Starts recording in either the selected slot or the next empty slot,\n                if the track\n                is armed. Ifrecord_lengthis provided, the slot will\n                record for the\n                given length in beats.\n                \n\n                If triggered while recording, recording will stop and clip playback\n                will start."
            },
            {
                "title": "undo",
                "description": "Causes the Live application to undo the last\n                operation."
            }
        ]
    },
    {
        "title": "Song.View",
        "description": "This class represents the view aspects of a Live document: the Session\n        and Arrangement Views.",
        "canonicalPath": "live_set view",
        "Children": [
            {
                "title": "detail_clip",
                "type": "Clip",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "The clip currently displayed in the Live\n                application's Detail View."
            },
            {
                "title": "highlighted_clip_slot",
                "type": "ClipSlot",
                "access": [
                    "get",
                    "set"
                ],
                "description": "The slot highlighted in the Session View."
            },
            {
                "title": "selected_chain",
                "type": "Chain",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "The highlighted chain, or \"id 0\""
            },
            {
                "title": "selected_parameter",
                "type": "DeviceParameter",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "The selected parameter, or \"id 0\""
            },
            {
                "title": "selected_scene",
                "type": "Scene",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": ""
            },
            {
                "title": "selected_track",
                "type": "Track",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": ""
            }
        ],
        "Properties": [
            {
                "title": "draw_mode",
                "type": "bool",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "Reflects the state of the envelope/automation Draw Mode Switch in\n                the\n                transport bar, as toggled with Cmd/Ctrl-B.\n                \n\n                0 = breakpoint editing (shows arrow), 1 = drawing (shows pencil)"
            },
            {
                "title": "follow_song",
                "type": "bool",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "Reflects the state of the Follow switch in the transport bar as\n                toggled\n                with Cmd/Ctrl-F.\n                \n\n                0 = don't follow playback position, 1 = follow playback position"
            }
        ],
        "Functions": [
            {
                "title": "select_device",
                "description": "Parameter:id NNSelects the given device object in its track.\n                \n\n                You may obtain the id using alive.pathor by usingget\n                    deviceson a track, for example.\n                \n\n                The track containing the device will not be shown automatically, and\n                the device gets the appointed device (blue hand) only if its track\n                is\n                selected."
            }
        ]
    },
    {
        "title": "GroovePool",
        "description": "This class represents the groove pool in Live. It\n        provides access to the current set's list of grooves.",
        "canonicalPath": "live_set groove_pool",
        "Children": [
            {
                "title": "grooves",
                "type": "list ofGroove",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "List of grooves in the groove pool from top to bottom, can be\n                accessed via index."
            }
        ],
        "Properties": [],
        "Functions": []
    },
    {
        "title": "Track",
        "description": "This class represents a track in Live. It can either be an audio track, a\n        MIDI track, a return track or the master track. The master track and at\n        least one Audio or MIDI track will be always present. Return tracks are\n        optional.\n        \n\n        \n\n        Not all properties are supported by all types of tracks. The properties\n        are marked accordingly.",
        "canonicalPath": "live_set tracks N",
        "Children": [
            {
                "title": "clip_slots",
                "type": "list ofClipSlot",
                "access": [
                    "get",
                    "observe"
                ],
                "description": ""
            },
            {
                "title": "arrangement_clips",
                "type": "list ofClip",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "The list of this track's Arrangement View clip IDsAvailable since Live 11.0."
            },
            {
                "title": "devices",
                "type": "list ofDevice",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "Includes mixer device."
            },
            {
                "title": "group_track",
                "type": "Track",
                "access": [
                    "get"
                ],
                "description": "The Group Track, if the Track is grouped. If it\n                is not,id 0is returned."
            },
            {
                "title": "mixer_device",
                "type": "MixerDevice",
                "access": [
                    "get"
                ],
                "description": ""
            },
            {
                "title": "view",
                "type": "Track.View",
                "access": [
                    "get"
                ],
                "description": ""
            }
        ],
        "Properties": [
            {
                "title": "arm",
                "type": "bool",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "1 = track is armed for recording. [not in\n                return/master tracks]"
            },
            {
                "title": "available_input_routing_channels",
                "type": "dictionary",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "The list of available source channels for the track's input routing.\n                It's represented as adictionarywith the following\n                key:available_input_routing_channels[list] \n\n                The list containsdictionariesas described ininput_routing_channel.\n                \n\n                Only available on MIDI and audio tracks."
            },
            {
                "title": "available_input_routing_types",
                "type": "dictionary",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "The list of available source types for the track's input routing.\n                It's represented as adictionarywith the following\n                key:available_input_routing_types[list] \n\n                The list containsdictionariesas described ininput_routing_type.\n                \n\n                Only available on MIDI and audio tracks."
            },
            {
                "title": "available_output_routing_channels",
                "type": "dictionary",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "The list of available target channels for the track's output\n                routing.\n                It's represented as adictionarywith the following\n                key:available_output_routing_channels[list] \n\n                The list containsdictionariesas described inoutput_routing_channel.\n                \n\n                Not available on the master track."
            },
            {
                "title": "available_output_routing_types",
                "type": "dictionary",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "The list of available target types for the track's output routing.\n                It's represented as adictionarywith the following\n                key:available_output_routing_types[list] \n\n                The list containsdictionariesas described inoutput_routing_type.\n                \n\n                Not available on the master track."
            },
            {
                "title": "can_be_armed",
                "type": "bool",
                "access": [
                    "get"
                ],
                "description": "0 for return and master tracks."
            },
            {
                "title": "can_be_frozen",
                "type": "bool",
                "access": [
                    "get"
                ],
                "description": "1 = the track can be frozen, 0 = otherwise."
            },
            {
                "title": "can_show_chains",
                "type": "bool",
                "access": [
                    "get"
                ],
                "description": "1 = the track contains an Instrument Rack device\n                that can show chains\n                in Session View."
            },
            {
                "title": "color",
                "type": "int",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "The RGB value of the track's color in the form0x00rrggbbor (2^16 * red) + (2^8) * green + blue, where red, green and blue\n                are\n                values from 0 (dark) to 255 (light).\n                \n\n                \n\n                When setting the RGB value, the nearest color from the track color\n                chooser is taken."
            },
            {
                "title": "color_index",
                "type": "long",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "The color index of the track."
            },
            {
                "title": "current_input_routing",
                "type": "symbol",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "Like all other routings, reflects the string shown in the routing\n                selector.Deprecated since Live 9.7. Please use input_routing_type\n                    instead."
            },
            {
                "title": "current_input_sub_routing",
                "type": "symbol",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "Doesn't send any output if the selector has no entries.Deprecated since Live 9.7. Please use input_routing_channel\n                    instead."
            },
            {
                "title": "current_monitoring_state",
                "type": "int",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "0 = In, 1 = Auto, 2 = Off [not in return/master\n                tracks]"
            },
            {
                "title": "current_output_routing",
                "type": "symbol",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "Deprecated since Live 9.7. Please use output_routing_type\n                    instead."
            },
            {
                "title": "current_output_sub_routing",
                "type": "symbol",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "Doesn't send any output if the selector has no entries.Deprecated since Live 9.7. Please use output_routing_channel\n                    instead."
            },
            {
                "title": "fired_slot_index",
                "type": "int",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "Reflects the blinking clip slot.\n                \n\n                -1 = no slot fired, -2 = Clip Stop Button fired\n                \n\n                First clip slot has index 0.\n                \n\n                [not in return/master tracks]"
            },
            {
                "title": "fold_state",
                "type": "int",
                "access": [
                    "get",
                    "set"
                ],
                "description": "0 = tracks within the Group Track are visible, 1 = Group Track is\n                folded and the tracks within the Group Track are hidden\n                \n\n                [only available ifis_foldable= 1]"
            },
            {
                "title": "has_audio_input",
                "type": "bool",
                "access": [
                    "get"
                ],
                "description": "1 for audio tracks."
            },
            {
                "title": "has_audio_output",
                "type": "bool",
                "access": [
                    "get"
                ],
                "description": "1 for audio tracks and MIDI tracks with\n                instruments."
            },
            {
                "title": "has_midi_input",
                "type": "bool",
                "access": [
                    "get"
                ],
                "description": "1 for MIDI tracks."
            },
            {
                "title": "has_midi_output",
                "type": "bool",
                "access": [
                    "get"
                ],
                "description": "1 for MIDI tracks with no instruments and no\n                audio effects."
            },
            {
                "title": "implicit_arm",
                "type": "bool",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "A second arm state, only used by Push so far."
            },
            {
                "title": "input_meter_left",
                "type": "float",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "Smoothed momentary peak value of left channel input meter, 0.0 to\n                1.0. For tracks with audio output only. This value corresponds to\n                the\n                meters shown in Live. Please take into account that the left/right\n                audio meters put a significant load onto the GUI part of Live."
            },
            {
                "title": "input_meter_level",
                "type": "float",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "Hold peak value of input meters of audio and MIDI tracks, 0.0 ...\n                1.0. For audio tracks it is the maximum of the left and right\n                channels. The hold time is 1 second."
            },
            {
                "title": "input_meter_right",
                "type": "float",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "Smoothed momentary peak value of right channel input meter, 0.0 to\n                1.0. For tracks with audio output only. This value corresponds to\n                the\n                meters shown in Live."
            },
            {
                "title": "input_routing_channel",
                "type": "dictionary",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "The currently selected source channel for the track's input routing.\n                It's represented as adictionarywith the following\n                keys:display_name[symbol]identifier[symbol] \n\n                Can be set to all values found in the track'savailable_input_routing_channels.\n                \n\n                Only available on MIDI and audio tracks."
            },
            {
                "title": "input_routing_type",
                "type": "dictionary",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "The currently selected source type for the track's input routing.\n                It's represented as adictionarywith the following\n                keys:display_name[symbol]identifier[symbol] \n\n                Can be set to all values found in the track'savailable_input_routing_types.\n                \n\n                Only available on MIDI and audio tracks."
            },
            {
                "title": "input_routings",
                "type": "list ofsymbols",
                "access": [
                    "get"
                ],
                "description": "Available input routings. [not in master track]Deprecated since Live 9.7. Please use\n                    available_input_routing_types instead."
            },
            {
                "title": "input_sub_routings",
                "type": "list ofsymbols",
                "access": [
                    "get"
                ],
                "description": "Available sub routings for the currently selected input routing.\n                If no entries are available, nothing is output. [not in master\n                track]Deprecated since Live 9.7. Please use\n                    available_input_routing_channels instead."
            },
            {
                "title": "is_foldable",
                "type": "bool",
                "access": [
                    "get"
                ],
                "description": "1 = track can be (un)folded to hide or reveal the contained\n                tracks. This is currently the case for Group Tracks. Instrument and\n                Drum Racks return 0 although they can be opened/closed. This will be\n                fixed in a later release."
            },
            {
                "title": "is_frozen",
                "type": "bool",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "1 = the track is currently frozen."
            },
            {
                "title": "is_grouped",
                "type": "bool",
                "access": [
                    "get"
                ],
                "description": "1 = the track is contained within a Group Track."
            },
            {
                "title": "is_part_of_selection",
                "type": "bool",
                "access": [
                    "get"
                ],
                "description": ""
            },
            {
                "title": "is_showing_chains",
                "type": "bool",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "Get or set whether a track with an Instrument\n                Rack device is currently\n                showing its chains in Session View."
            },
            {
                "title": "is_visible",
                "type": "bool",
                "access": [
                    "get"
                ],
                "description": "0 = track is hidden in a folded Group Track."
            },
            {
                "title": "mute",
                "type": "bool",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "[not in master track]"
            },
            {
                "title": "muted_via_solo",
                "type": "bool",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "1 = the track or chain is muted due to Solo\n                being active on at least one other track."
            },
            {
                "title": "name",
                "type": "symbol",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "As shown in track header."
            },
            {
                "title": "output_meter_left",
                "type": "float",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "Smoothed momentary peak value of left channel output meter, 0.0 to\n                1.0. For tracks with audio output only. This value corresponds to\n                the\n                meters shown in Live. Please take into account that the left/right\n                audio meters add a significant load to Live GUI resource usage."
            },
            {
                "title": "output_meter_level",
                "type": "float",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "Hold peak value of output meters of audio and MIDI tracks, 0.0 to\n                1.0. For audio tracks, it is the maximum of the left and right\n                channels. The hold time is 1 second."
            },
            {
                "title": "output_meter_right",
                "type": "float",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "Smoothed momentary peak value of right channel output meter, 0.0 to\n                1.0. For tracks with audio output only. This value corresponds to\n                the\n                meters shown in Live."
            },
            {
                "title": "performance_impact",
                "type": "float",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "Reports the performance impact of this track."
            },
            {
                "title": "output_routing_channel",
                "type": "dictionary",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "The currently selected target channel for the track's output\n                routing.\n                It's represented as adictionarywith the following\n                keys:display_name[symbol]identifier[symbol] \n\n                Can be set to all values found in the track'savailable_output_routing_channels.\n                \n\n                Not available on the master track."
            },
            {
                "title": "output_routing_type",
                "type": "dictionary",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "The currently selected target type for the track's output routing.\n                It's represented as adictionarywith the following\n                keys:display_name[symbol]identifier[symbol] \n\n                Can be set to all values found in the track'savailable_output_routing_types.\n                \n\n                Not available on the master track."
            },
            {
                "title": "output_routings",
                "type": "list ofsymbols",
                "access": [
                    "get"
                ],
                "description": "Available output routings. [not in master track]Deprecated since Live 9.7. Please use\n                    available_output_routing_types instead."
            },
            {
                "title": "output_sub_routings",
                "type": "list ofsymbols",
                "access": [
                    "get"
                ],
                "description": "Available sub routings for the currently selected output routing.\n                If no entries are available, nothing is output. [not in master\n                track]Deprecated since Live 9.7. Please use\n                    available_output_routing_channels instead."
            },
            {
                "title": "playing_slot_index",
                "type": "int",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "First slot has index 0, -2 = Clip Stop slot\n                fired in Session View, -1 = Arrangement recording with no Session\n                clip playing. [not in return/master tracks]"
            },
            {
                "title": "solo",
                "type": "bool",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "Remark: when setting this property, the exclusive Solo logic is\n                bypassed, so you have to unsolo the other tracks yourself. [not in\n                master track]"
            }
        ],
        "Functions": [
            {
                "title": "delete_clip",
                "description": "Parameter:clipDelete the given clip."
            },
            {
                "title": "delete_device",
                "description": "Parameter:indexDelete the device at the given index."
            },
            {
                "title": "duplicate_clip_slot",
                "description": "Parameter:indexWorks like 'Duplicate' in a clip's context menu."
            },
            {
                "title": "duplicate_clip_to_arrangement",
                "description": "Parameters:clipdestination_time[double]\n                \n\n                Duplicate the given clip to the Arrangement, placing it at the givendestination_timein beats."
            },
            {
                "title": "jump_in_running_session_clip",
                "description": "Parameter:beatsbeats[double] is the amount to jump relatively to the current clip\n                position.\n                \n\n                Modify playback position in running Session clip, if any."
            },
            {
                "title": "stop_all_clips",
                "description": "Stops all playing and fired clips in this track."
            }
        ]
    },
    {
        "title": "Track.View",
        "description": "Representing the view aspects of a track.",
        "canonicalPath": "live_set tracks N view",
        "Children": [
            {
                "title": "selected_device",
                "type": "Device",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "The selected device or the first selected device (in case of\n                multi/group selection)."
            }
        ],
        "Properties": [
            {
                "title": "device_insert_mode",
                "type": "int",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "Determines where a device will be inserted when loaded from the\n                browser. 0 = add device at the end, 1 = add device\n                to the left of the selected device, 2 = add device to the right\n                of the selected device."
            },
            {
                "title": "is_collapsed",
                "type": "bool",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "In Arrangement View: 1 = track collapsed, 0 =\n                track opened."
            }
        ],
        "Functions": [
            {
                "title": "select_instrument",
                "description": "Returns: bool 0 = there are no devices to select\n                \n\n                Selects track's instrument or first device, makes it visible and\n                focuses on it."
            }
        ]
    },
    {
        "title": "ClipSlot",
        "description": "This class represents an entry in Live's Session View matrix.\n        \n\n        \n\n        The propertiesplaying_status,is_playingandis_recordingare useful for clip slots of Group Tracks. These are always empty and\n        represent the state of the clips in the tracks within the Group Track.",
        "canonicalPath": "live_set tracks N clip_slots M",
        "Children": [
            {
                "title": "clip",
                "type": "Clip",
                "access": [
                    "get"
                ],
                "description": "id 0if slot is empty"
            }
        ],
        "Properties": [
            {
                "title": "color",
                "type": "long",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "The color of the first clip in the Group Track if\n                the clip slot is a Group Track slot."
            },
            {
                "title": "color_index",
                "type": "long",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "The color index of the first clip in the Group\n                Track if the clip slot is a Group Track slot."
            },
            {
                "title": "controls_other_clips",
                "type": "bool",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "1 for a Group Track slot that has non-deactivated clips in the\n                tracks\n                within its group.\n                \n\n                Control of empty clip slots doesn't count."
            },
            {
                "title": "has_clip",
                "type": "bool",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "1 = a clip exists in this clip slot."
            },
            {
                "title": "has_stop_button",
                "type": "bool",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "1 = this clip stops its track (or tracks within a\n                Group Track)."
            },
            {
                "title": "is_group_slot",
                "type": "bool",
                "access": [
                    "get"
                ],
                "description": "1 = this clip slot is a Group Track slot."
            },
            {
                "title": "is_playing",
                "type": "bool",
                "access": [
                    "get"
                ],
                "description": "1 = playing_status != 0, otherwise 0."
            },
            {
                "title": "is_recording",
                "type": "bool",
                "access": [
                    "get"
                ],
                "description": "1 = playing_status == 2, otherwise 0."
            },
            {
                "title": "is_triggered",
                "type": "bool",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "1 = clip slot button (Clip Launch, Clip Stop or Clip Record) or\n                button of contained\n                clip are blinking."
            },
            {
                "title": "playing_status",
                "type": "int",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "0 = all clips in tracks within a Group Track stopped or all tracks\n                within a Group Track are empty.\n                \n\n                1 = at least one clip in a track within a Group Track is playing.\n                \n\n                2 = at least one clip in a track within a Group Track is playing or\n                recording.\n                \n\n                Equals 0 if this is not a clip slot of a Group Track."
            },
            {
                "title": "will_record_on_start",
                "type": "bool",
                "access": [
                    "get"
                ],
                "description": "1 = clip slot will record on start."
            }
        ],
        "Functions": [
            {
                "title": "create_clip",
                "description": "Parameter:lengthLength is given in beats and must be a greater value than 0.0. Can\n                only be called on empty\n                clip slots in MIDI tracks."
            },
            {
                "title": "delete_clip",
                "description": "Deletes the contained clip."
            },
            {
                "title": "duplicate_clip_to",
                "description": "Parameter:target_clip_slot[ClipSlot]\n                \n\n                Duplicates the slot's clip to the given clip slot, overriding the\n                target clip slot's clip if it's not empty."
            },
            {
                "title": "fire",
                "description": "Parameter:record_length (optional)launch_quantization (optional)Fires the clip or triggers the Stop Button, if any. Starts recording\n                if slot is empty and track is armed. Starts recording of armed and\n                empty tracks within a Group Track if\n                Preferences->Launch->Start Recording on Scene\n                Launch is ON. Ifrecord_lengthis provided, the slot will\n                record for the\n                given length in beats.launch_quantizationoverrides the\n                global quantization\n                if provided."
            },
            {
                "title": "set_fire_button_state",
                "description": "Parameter:state[bool]\n                \n\n                1 = Live simulates pressing of Clip Launch\n                button until the state is set to 0 or until the slot is stopped\n                otherwise."
            },
            {
                "title": "stop",
                "description": "Stops playing or recording clips in this track or the tracks within\n                the group, if\n                any. It doesn't matter on which slot of the track you call this\n                function."
            }
        ]
    },
    {
        "title": "Clip",
        "description": "This class represents a clip in Live. It can be either an audio clip or a\n        MIDI clip in the Arrangement or Session View, depending on the track / slot\n        it lives in.",
        "canonicalPath": "live_set tracks N clip_slots M clip",
        "Children": [
            {
                "title": "view",
                "type": "Clip.View",
                "access": [
                    "get"
                ],
                "description": ""
            }
        ],
        "Properties": [
            {
                "title": "available_warp_modes",
                "type": "list",
                "access": [
                    "get"
                ],
                "description": "Returns the list of indexes of the Warp Modes available for the\n                clip. Only\n                valid for audio clips."
            },
            {
                "title": "color",
                "type": "int",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "The RGB value of the clip's color in the form0x00rrggbbor (2^16 * red) + (2^8) * green + blue, where red, green and blue\n                are\n                values from 0 (dark) to 255 (light).\n                \n\n                \n\n                When setting the RGB value, the nearest color from the clip color\n                chooser is taken."
            },
            {
                "title": "color_index",
                "type": "int",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "The clip's color index."
            },
            {
                "title": "end_marker",
                "type": "double",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "The end marker of the clip in beats, independent of the loop state.\n                Cannot be set\n                before the start marker."
            },
            {
                "title": "end_time",
                "type": "double",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "The end time of the clip. For Session View clips, if Loop is on,\n                this is the Loop End, otherwise it's the End Marker. For Arrangement\n                View clips, this is always the position of the clip's rightmost edge\n                in the Arrangement."
            },
            {
                "title": "gain",
                "type": "double",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "The gain of the clip (range is 0.0 to 1.0). Only valid for audio\n                clips."
            },
            {
                "title": "gain_display_string",
                "type": "symbol",
                "access": [
                    "get"
                ],
                "description": "Get the gain display value of the clip as a string (e.g. \"1.3 dB\").\n                Can only be\n                called on audio clips."
            },
            {
                "title": "file_path",
                "type": "symbol",
                "access": [
                    "get"
                ],
                "description": "Get the location of the audio file represented by the clip. Only\n                available for audio clips."
            },
            {
                "title": "groove",
                "type": "Groove",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "Get/set/observe access to the groove associated with this clip.Available since Live 11.0."
            },
            {
                "title": "has_envelopes",
                "type": "bool",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "Get/observe whether the clip has any automation."
            },
            {
                "title": "has_groove",
                "type": "bool",
                "access": [
                    "get"
                ],
                "description": "Returns true if a groove is associated with this clip.Available since Live 11.0."
            },
            {
                "title": "is_arrangement_clip",
                "type": "bool",
                "access": [
                    "get"
                ],
                "description": "1 = The clip is an Arrangement clip.\n                \n\n                A clip can be either an Arrangement or a Session clip."
            },
            {
                "title": "is_audio_clip",
                "type": "bool",
                "access": [
                    "get"
                ],
                "description": "0 = MIDI clip, 1 = audio clip"
            },
            {
                "title": "is_midi_clip",
                "type": "bool",
                "access": [
                    "get"
                ],
                "description": "The opposite ofis_audio_clip."
            },
            {
                "title": "is_overdubbing",
                "type": "bool",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "1 = clip is overdubbing."
            },
            {
                "title": "is_playing",
                "type": "bool",
                "access": [
                    "get",
                    "set"
                ],
                "description": "1 = clip is playing or recording."
            },
            {
                "title": "is_recording",
                "type": "bool",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "1 = clip is recording."
            },
            {
                "title": "is_triggered",
                "type": "bool",
                "access": [
                    "get"
                ],
                "description": "1 = Clip Launch button is blinking."
            },
            {
                "title": "launch_mode",
                "type": "int",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "The Launch Mode of the Clip as an integer index. Available Launch\n                Modes are:\n                \n\n                0 = Trigger (default)\n                \n\n                1 = Gate\n                \n\n                2 = Toggle\n                \n\n                3 = RepeatAvailable since Live 11.0."
            },
            {
                "title": "launch_quantization",
                "type": "int",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "The Launch Quantization of the Clip as an integer index. Available\n                Launch Quantization values are:\n                \n\n                0 = Global (default)\n                \n\n                1 = None\n                \n\n                2 = 8 Bars\n                \n\n                3 = 4 Bars\n                \n\n                4 = 2 Bars\n                \n\n                5 = 1 Bar\n                \n\n                6 = 1/2\n                \n\n                7 = 1/2T\n                \n\n                8 = 1/4\n                \n\n                9 = 1/4T\n                \n\n                10 = 1/8\n                \n\n                11 = 1/8T\n                \n\n                12 = 1/16\n                \n\n                13 = 1/16T\n                \n\n                14 = 1/32Available since Live 11.0."
            },
            {
                "title": "legato",
                "type": "bool",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "1 = Legato Mode switch in the Clip's Launch settings is on.Available since Live 11.0."
            },
            {
                "title": "length",
                "type": "double",
                "access": [
                    "get"
                ],
                "description": "For looped clips: loop length in beats. Otherwise it's the distance\n                in\n                beats from start to end marker. Makes no sense for unwarped audio\n                clips."
            },
            {
                "title": "loop_end",
                "type": "double",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "For looped clips: loop end.\n                \n\n                For unlooped clips: clip end."
            },
            {
                "title": "loop_jump",
                "type": "bang",
                "access": [
                    "observe"
                ],
                "description": "Bangs when the clip play position is crossing the loop start marker\n                (possibly projected into the loop)."
            },
            {
                "title": "loop_start",
                "type": "double",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "For looped clips: loop start.\n                \n\n                For unlooped clips: clip start.\n                \n\n                \n\n                loop_start and loop_end are in absolute clip beat time if clip is\n                MIDI or warped. The 1.1.1 position has beat time 0. If the clip is\n                unwarped audio, they are given in seconds, 0 is the time of the\n                first\n                sample in the audio material."
            },
            {
                "title": "looping",
                "type": "bool",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "1 = clip is looped. Unwarped audio cannot be\n                looped."
            },
            {
                "title": "muted",
                "type": "bool",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "1 = muted (i.e. the Clip Activator button of the\n                clip is off)."
            },
            {
                "title": "name",
                "type": "symbol",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": ""
            },
            {
                "title": "notes",
                "type": "bang",
                "access": [
                    "observe"
                ],
                "description": "Observer sends bang when the list of notes changes.\n                \n\n                Available for MIDI clips only."
            },
            {
                "title": "warp_markers",
                "type": "dict/bang",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "The Clip's Warp Markers as a dict. Observing this property bangs\n                when the warp_markers change.\n\n                \n\n                The last Warp Marker in the dict is not visible in the Live\n                interface. This hidden marker is used to calculate the BPM of the\n                last segment.\n                \n\n                \n\n                Available for audio clips only.Getting is available since Live 11.0."
            },
            {
                "title": "pitch_coarse",
                "type": "int",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "Pitch shift in semitones (\"Transpose\"), -48 ... 48.\n                \n\n                Available for audio clips only."
            },
            {
                "title": "pitch_fine",
                "type": "float",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "Extra pitch shift in cents (\"Detune\"), -50 ... 49.\n                \n\n                Available for audio clips only."
            },
            {
                "title": "playing_position",
                "type": "float",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "Current playing position of the clip.\n                \n\n                \n\n                For MIDI and warped audio clips, the value is given in beats of\n                absolute clip time. The clip's beat time of 0 is where 1 is shown in\n                the bar/beat/16th time scale at the top of the clip view.\n                \n\n                \n\n                For unwarped audio clips, the position is given in seconds,\n                according\n                to the time scale shown at the bottom of the clip view.\n                \n\n                \n\n                Stopped clips have a playing position of 0."
            },
            {
                "title": "playing_status",
                "type": "bang",
                "access": [
                    "observe"
                ],
                "description": "Observer sends bang when playing/trigger status\n                changes."
            },
            {
                "title": "position",
                "type": "float",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "Get and set the clip's loop position. The value will always equal\n                loop_start, however setting this property, unlike setting\n                loop_start, preserves the loop\n                length."
            },
            {
                "title": "ram_mode",
                "type": "bool",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "1 = an audio clip\u2019s RAM switch is enabled."
            },
            {
                "title": "sample_length",
                "type": "int",
                "access": [
                    "get"
                ],
                "description": "Length of the Clip's sample, in samples."
            },
            {
                "title": "sample_rate",
                "type": "float",
                "access": [
                    "get"
                ],
                "description": "Get the Clip's sample rate."
            },
            {
                "title": "signature_denominator",
                "type": "int",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": ""
            },
            {
                "title": "signature_numerator",
                "type": "int",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": ""
            },
            {
                "title": "start_marker",
                "type": "double",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "The start marker of the clip in beats, independent of the loop\n                state. Cannot be set\n                behind the end marker."
            },
            {
                "title": "start_time",
                "type": "double",
                "access": [
                    "get"
                ],
                "description": "The start time of the clip, relative to the global song time. For\n                Session View clips, this is the time the clip was started. For\n                Arrangement View clips, this is the offset within the arrangement.\n                The value is in beats."
            },
            {
                "title": "velocity_amount",
                "type": "float",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "How much the velocity of the note that triggers the clip affects its\n                volume, 0 = no effect, 1 = full effect.Available since Live 11.0."
            },
            {
                "title": "warp_mode",
                "type": "int",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "The Warp Mode of the clip as an integer index. Available Warp Modes\n                are:\n                \n\n                0 = Beats Mode\n                \n\n                1 = Tones Mode\n                \n\n                2 = Texture Mode\n                \n\n                3 = Re-Pitch Mode\n                \n\n                4 = Complex Mode\n                \n\n                5 = REX Mode\n                \n\n                6 = Complex Pro Mode\n                \n\n                Available for audio clips only."
            },
            {
                "title": "warping",
                "type": "bool",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "1 = Warp switch is on.\n                \n\n                Available for audio clips only."
            },
            {
                "title": "will_record_on_start",
                "type": "bool",
                "access": [
                    "get"
                ],
                "description": "1 for MIDI clips which are in triggered state, with the track armed\n                and MIDI Arrangement Overdub on."
            }
        ],
        "Functions": [
            {
                "title": "add_new_notes",
                "description": "Parameter:dictionaryKey:\"notes\"[list of note\n                specification dictionaries]\n                \n\n                Note specification dictionaries have the following keys:pitch:\n                [int] the MIDI note number, 0...127, 60 is C3.start_time: [float] the note\n                start time in beats of absolute clip\n                time.duration:\n                [float] the note length in beats.velocity\n                        (optional): [float] the note velocity, 0 ... 127(100 by default).mute\n                        (optional): [bool] 1 = the note is deactivated(0 by default).probability\n                        (optional): [float] the chance that the note\n                will be\n                played:\n                \n\n                1.0 = the note is always played\n                \n\n                0.0 = the note is never played(1.0 by default).velocity_deviation\n                        (optional): [float] the range of velocity\n                values at which the note can be played:\n                \n\n                0.0 = no deviation; the note will always play at the velocity\n                specified by thevelocityproperty\n                \n\n                -127.0 to 127.0 = the note will be assigned a velocity value betweenvelocityandvelocity + velocity_deviation,\n                inclusive;\n                if the resulting range exceeds the limits of MIDI velocity (0 to\n                127), then\n                it will be clamped within those limits(0.0 by default).release_velocity\n                        (optional): [float] the note release velocity(64 by default).\n                \n\n                Returns a list of note IDs of the added notes.\n                \n\n                \n\n                For MIDI clips only.Available since Live 11.0."
            },
            {
                "title": "add_warp_marker",
                "description": "Only available for warped Audio Clips. Adds the specified warp\n                marker, if\n                possible.\n                \n\n                \n\n                The warp marker is specified as a dict which can have abeat_timeand asample_timekey, both associated\n                with float values.\n                \nThesample_timekey may be omitted;\n                in this\n                case, Live will calculate the appropriate sample time to create a\n                warp marker at\n                the specified beat time without changing the Clip's playback timing,\n                similar to\n                what would happen if you were to double-click in the upper half of\n                the Sample\n                Display in Clip View.\n                \n\n                \n\n                Ifsample_timeis specified,\n                certain limitations must be taken\n                into account:"
            },
            {
                "title": "apply_note_modifications",
                "description": "Parameter:dictionaryKey:\"notes\"[list of note\n                dictionaries] as returned fromget_notes_extended.\n                \n\n                The list of note dictionaries passed to the function can be a subset\n                of notes in\n                the clip, but will be ignored if it contains any notes that are not\n                present in\n                the clip.\n                \n\n                \n\n                For MIDI clips only.Available since Live 11.0. Replaces modifying notes with\n                    remove_notes followed by set_notes."
            },
            {
                "title": "clear_all_envelopes",
                "description": "Removes all automation in the clip."
            },
            {
                "title": "clear_envelope",
                "description": "Parameter:device_parameter[id]\n                \n\n                Removes the automation of the clip for the given parameter."
            },
            {
                "title": "crop",
                "description": "Crops the clip: if the clip is looped, the region outside the loop\n                is removed;\n                if it isn't, the region outside the start and end markers."
            },
            {
                "title": "deselect_all_notes",
                "description": "Call this before replace_selected_notes if you just want to add some\n                notes.\n                \n\n                Output:deselect_all_notes id\n                    0For MIDI clips only."
            },
            {
                "title": "duplicate_loop",
                "description": "Makes the loop two times longer by moving loop_end to the right, and\n                duplicates\n                both the notes and the envelopes. If the clip is not looped, the\n                clip start/end\n                range is duplicated. Available for MIDI clips only."
            },
            {
                "title": "duplicate_notes_by_id",
                "description": "Parameter:listof\n                note IDs.\n                \n\n                OrdictionaryKeys:note_ids[list of note IDs] as returned fromget_notes_extendeddestination_time\n                        (optional)[double/int]transposition_amount\n                        (optional)[int]\n                \n\n                Duplicates all notes matching the given note IDs.\n                \n\n                Provided note IDs must be associated with existing notes in the\n                clip.\n                Existing notes can be queried withget_notes_extended.\n                \n\n                The selection of notes will be duplicated todestination_time, if\n                provided. Otherwise the new notes will be inserted after the last\n                selected note.\n                This behavior can be observed when duplicating notes in the Live\n                GUI.\n                \n\n                If thetransposition_amountis specified, the duplicated\n                notes will be\n                transposed by the number of semitones.\n                \n\n                Available for MIDI clips only.Available since Live 11.1.2"
            },
            {
                "title": "duplicate_region",
                "description": "Parameter:region_start[double/int]region_length[double/int]destination_time[double/int]pitch\n                        (optional)[int]transposition_amount\n                        (optional)[int]\n                \n\n                Duplicate the notes in the specified region to thedestination_time.\n                Only notes of the specified pitch are duplicated or all ifpitchis -1.\n                If thetransposition_amountis not 0, the notes in the\n                region will\n                be transposed by thetranspose_amountof semitones.\n                Available for MIDI clips only."
            },
            {
                "title": "fire",
                "description": "Same effect as pressing the Clip Launch button."
            },
            {
                "title": "get_all_notes_extended",
                "description": "Parameter:dict\n                        (optional)[dict]\n                \n\n                (See below for a discussion of this argument).\n                \n\n                \n\n                Returns a dictionary of all of the notes in the clip, regardless of\n                where they\n                are positioned with respect to the start/end markers and the loop\n                start/loop end,\n                as a list of note dictionaries. Each note dictionary consists of the\n                following\n                key-value pairs:note_id:\n                [int] the unique note identifier.pitch:\n                [int] the MIDI note number, 0...127, 60 is C3.start_time: [float] the note\n                start time in beats of absolute clip\n                time.duration:\n                [float] the note length in beats.velocity:\n                [float] the note velocity, 0 ... 127.mute:\n                [bool] 1 = the note is deactivated.probability: [float] the chance\n                that the note will be played:\n                \n\n                1.0 = the note is always played;\n                \n\n                0.0 = the note is never played.velocity_deviation: [float] the\n                range of velocity values at which\n                the note can be played:\n                \n\n                0.0 = no deviation; the note will always play at the velocity\n                specified by thevelocityproperty\n                \n\n                -127.0 to 127.0 = the note will be assigned a velocity value betweenvelocityandvelocity + velocity_deviation,\n                inclusive;\n                if the resulting range exceeds the limits of MIDI velocity (0 to\n                127), then\n                it will be clamped within those limits.release_velocity: [float] the\n                note release velocity.\n                \n\n                \n\n                It is possible to optionally provide a single [dict] argument to\n                this function,\n                containing a single key-value pair: the key is \"return\" and the\n                associated value\n                is a list of the note properties as listed above in the discussion\n                of the\n                returned note dictionaries, e.g. [\"note_id\", \"pitch\", \"velocity\"].\n                The effect of\n                this will be that the returned note dictionaries will only contain\n                the key-value\n                pairs for the specified properties, which can be useful to improve\n                patch\n                performance when processing large notes dictionaries.\n                \n\n                \n\n                For MIDI clips only.Available since Live 11.1"
            },
            {
                "title": "get_notes",
                "description": "Parameter:from_time[double/int]from_pitch[int]time_span[double/int]pitch_span[int]\n                \n\n                Returns a list of notes that start in the given area. The output is\n                similar toget_selected_notes.from_timeandtime_spanare given in beats.Deprecated since Live 11.0. Please useget_notes_extendedinstead."
            },
            {
                "title": "get_notes_by_id",
                "description": "Parameter:listof\n                note IDs.\n                \n\n                \n\n                Provided note IDs must be associated with existing notes in the\n                clip.\n                Existing notes can be queried withget_notes_extended.\n                \n\n                \n\n                Returns a dictionary of notes associated with the provided IDs, as a\n                list of\n                note dictionaries. Each note dictionary consists of the following\n                key-value\n                pairs:note_id:\n                [int] the unique note identifier.pitch:\n                [int] the MIDI note number, 0...127, 60 is C3.start_time: [float] the note\n                start time in beats of absolute clip\n                time.duration:\n                [float] the note length in beats.velocity:\n                [float] the note velocity, 0 ... 127.mute:\n                [bool] 1 = the note is deactivated.probability: [float] the chance\n                that the note will be played:\n                \n\n                1.0 = the note is always played;\n                \n\n                0.0 = the note is never played.velocity_deviation: [float] the\n                range of velocity values at which\n                the note can be played:\n                \n\n                0.0 = no deviation; the note will always play at the velocity\n                specified by thevelocityproperty\n                \n\n                -127.0 to 127.0 = the note will be assigned a velocity value betweenvelocityandvelocity + velocity_deviation,\n                inclusive;\n                if the resulting range exceeds the limits of MIDI velocity (0 to\n                127), then\n                it will be clamped within those limits.release_velocity: [float] the\n                note release velocity.\n                \n\n                \n\n                It is possible to optionally provide the argument to this function\n                in the form\n                of a dictionary instead. The dictionary must include the \"note_ids\"\n                key\n                associated with a list of [int]s, which are the ID values you would\n                like to pass\n                to the function.\n                \n\n                \n\n                If you use this method, you can optionally provide an additional\n                key-value pair:\n                the key is \"return\" and the associated value is a list of the note\n                properties as\n                listed above in the discussion of the returned note dictionaries,\n                e.g.\n                [\"note_id\", \"pitch\", \"velocity\"]. The effect of this will be that\n                the returned\n                note dictionaries will only contain the key-value pairs for the\n                specified\n                properties, which can be useful to improve patch performance when\n                processing\n                large notes dictionaries.\n                \n\n                \n\n                For MIDI clips only.Available since Live 11.0."
            },
            {
                "title": "get_notes_extended",
                "description": "Parameters:from_pitch[int]pitch_span[int]from_time[float]time_span[float]from_timeandtime_spanare given in beats.\n                \n\n                \n\n                Returns a dictionary of notes that have their start times in the\n                given area, as\n                a list of note dictionaries. Each note dictionary consists of the\n                following\n                key-value pairs:note_id:\n                [int] the unique note identifier.pitch:\n                [int] the MIDI note number, 0...127, 60 is C3.start_time: [float] the note\n                start time in beats of absolute clip\n                time.duration:\n                [float] the note length in beats.velocity:\n                [float] the note velocity, 0 ... 127.mute:\n                [bool] 1 = the note is deactivated.probability: [float] the chance\n                that the note will be played:\n                \n\n                1.0 = the note is always played;\n                \n\n                0.0 = the note is never played.velocity_deviation: [float] the\n                range of velocity values at which\n                the note can be played:\n                \n\n                0.0 = no deviation; the note will always play at the velocity\n                specified by thevelocityproperty\n                \n\n                -127.0 to 127.0 = the note will be assigned a velocity value betweenvelocityandvelocity + velocity_deviation,\n                inclusive;\n                if the resulting range exceeds the limits of MIDI velocity (0 to\n                127), then\n                it will be clamped within those limits.release_velocity: [float] the\n                note release velocity.\n                \n\n                \n\n                It is possible to optionally provide the arguments to this function\n                in the form\n                of a single dictionary instead. The dictionary must include all of\n                the parameter\n                names given above as its keys; the associated values are the\n                parameter values\n                you wish to pass to the function.\n                \n\n                \n\n                If you use this method, you can optionally provide an additional\n                key-value pair:\n                the key is \"return\" and the associated value is a list of the note\n                properties as\n                listed above in the discussion of the returned note dictionaries,\n                e.g.\n                [\"note_id\", \"pitch\", \"velocity\"]. The effect of this will be that\n                the returned\n                note dictionaries will only contain the key-value pairs for the\n                specified\n                properties, which can be useful to improve patch performance when\n                processing\n                large notes dictionaries.\n                \n\n                \n\n                For MIDI clips only.Available since Live 11.0. Replaces get_notes."
            },
            {
                "title": "get_selected_notes",
                "description": "Use this if you want to operate on the selected notes.\n                \n\n                Output:get_selected_notes notescountget_selected_notes notepitchtimedurationvelocitymuted...get_selected_notes\n                    donecount[int] is the number of note lines to follow.pitch[int] is the MIDI note number, 0...127, 60 is C3.time[double] is the note start time in beats of absolute clip time.duration[double] is the note length in beats.velocity[int] is the note velocity, 1 ... 127.muted[bool] 1 = the note is deactivated.\n                \n\n                \n\n                For MIDI clips only.Deprecated since Live 11.0.\n                    Please useget_selected_notes_extendedinstead."
            },
            {
                "title": "get_selected_notes_extended",
                "description": "Parameter:dict\n                        (optional)[dict]\n                \n\n                (See below for a discussion of this argument).\n                \n\n                \n\n                Returns a dictionary of the selected notes in the clip, as a list of\n                note\n                dictionaries. Each note dictionary consists of the following\n                key-value pairs:note_id:\n                [int] the unique note identifier.pitch:\n                [int] the MIDI note number, 0...127, 60 is C3.start_time: [float] the note\n                start time in beats of absolute clip\n                time.duration:\n                [float] the note length in beats.velocity:\n                [float] the note velocity, 0 ... 127.mute:\n                [bool] 1 = the note is deactivated.probability: [float] the chance\n                that the note will be played:\n                \n\n                1.0 = the note is always played;\n                \n\n                0.0 = the note is never played.velocity_deviation: [float] the\n                range of velocity values at which\n                the note can be played:\n                \n\n                0.0 = no deviation; the note will always play at the velocity\n                specified by thevelocityproperty\n                \n\n                -127.0 to 127.0 = the note will be assigned a velocity value betweenvelocityandvelocity + velocity_deviation,\n                inclusive;\n                if the resulting range exceeds the limits of MIDI velocity (0 to\n                127), then\n                it will be clamped within those limits.release_velocity: [float] the\n                note release velocity.\n                \n\n                \n\n                It is possible to optionally provide a single [dict] argument to\n                this function,\n                containing a single key-value pair: the key is \"return\" and the\n                associated value\n                is a list of the note properties as listed above in the discussion\n                of the\n                returned note dictionaries, e.g. [\"note_id\", \"pitch\", \"velocity\"].\n                The effect of\n                this will be that the returned note dictionaries will only contain\n                the key-value\n                pairs for the specified properties, which can be useful to improve\n                patch\n                performance when processing large notes dictionaries.\n                \n\n                \n\n                For MIDI clips only.Available since Live 11.0. Replaces get_selected_notes."
            },
            {
                "title": "move_playing_pos",
                "description": "Parameter:beatsbeats[double] relative jump distance in beats. Negative beats jump\n                backwards.\n                \n\n                Jumps by given amount, unquantized.\n                \n\n                Unwarped audio clips, recording audio clips and recording\n                non-overdub\n                MIDI clips cannot jump."
            },
            {
                "title": "move_warp_marker",
                "description": "Parameters:beat_time[double]beat_time_distance[double]\n                \n\n                Moves the warp marker specified bybeat_timethe specified beat time distance."
            },
            {
                "title": "quantize",
                "description": "Parameter:quantization_grid[int]amount[double]\n                \n\n                Quantizes all notes in the clip to the quantization_grid taking the\n                song's\n                swing_amount into account."
            },
            {
                "title": "quantize_pitch",
                "description": "Parameter:pitch[int]quantization_grid[int]amount[double]\n                \n\n                Same asquantize, but only for notes in the given pitch."
            },
            {
                "title": "remove_notes",
                "description": "Parameter:from_time[double]from_pitch[int]time_span[double]pitch_span[int]\n                \n\n                Deletes all notes that start in the given area.from_timeandtime_spanare given in beats.Deprecated since Live 11.0.\n                    Please useremove_notes_extendedinstead.\n                    If a device uses the deprecated method in Live 11, a warning\n                    pop-up will notify users that the device needs to be\n                    updated."
            },
            {
                "title": "remove_notes_by_id",
                "description": "Parameter:listof\n                note IDs.\n                \n\n                Deletes all notes associated with the provided IDs.\n                \n\n                Provided note IDs must be associated with existing notes in the\n                clip.\n                Existing notes can be queried withget_notes_extended.Available since Live 11.0."
            },
            {
                "title": "remove_notes_extended",
                "description": "Parameter:from_pitch[int]pitch_span[int]from_time[float]time_span[float]\n                \n\n                Deletes all notes that start in the given area.from_timeandtime_spanare given in beats.Available since Live 11.0. Replaces remove_notes."
            },
            {
                "title": "remove_warp_marker",
                "description": "Parameter:beat_time[float]\n                \n\n                Removes the warp marker at the given beat time."
            },
            {
                "title": "replace_selected_notes",
                "description": "To replace the notes selected in the clip, send a series of the\n                following function calls to the clip.replace_selected_notesnotescountnotepitchtimedurationvelocitymuteddoneThe sequence is the same as inget_selected_notes, the parameters are the same too. The sequence must always be\n                completed, since the clip waits for the respective calls even if\n                intermediate messages are sent. If count is zero, this means there\n                are no note\n                calls.\n                \n\n                \n\n                In Live, notes don't overlap, so if the new notes overlap with\n                unselected notes, the unselected ones are made to fit in the same\n                way as\n                when you edit notes manually.\n                \n\n                \n\n                An example sequence of calls looks like this:call replace_selected_notes\n                    \n\n                    call notes 2\n                    \n\n                    call note 60 0.0 0.5 100 0\n                    \n\n                    call note 62 0.5 0.5 64 0\n                    \n\n                    call doneFor MIDI clips only.Deprecated since Live 11.0.\n                    Please useapply_note_modificationsinstead.\n                    If a device uses the deprecated method in Live 11, a warning\n                    pop-up will notify users that the device needs to be\n                    updated."
            },
            {
                "title": "scrub",
                "description": "Parameter:beat_time[double]\n                \n\n                Scrub the clip to a time, specified in beats. This behaves exactly\n                like scrubbing with the mouse; the scrub will respect Global\n                Quantization, starting and looping in time with the transport. The\n                scrub will continue until stop_scrub() is called."
            },
            {
                "title": "select_all_notes",
                "description": "Use this function to process all notes of a clip,\n                independent of the current selection.\n                \n\n                \n\n                Output:select_all_notes id\n                    0For MIDI clips only."
            },
            {
                "title": "select_notes_by_id",
                "description": "Parameter:listof\n                note IDs.\n                \n\n                Selects all notes associated with the provided IDs.\n                \n\n                \n\n                Note that this function willnotprint a warning or error\n                if the list contains nonexistent IDs.Available since Live 11.0.6"
            },
            {
                "title": "set_fire_button_state",
                "description": "Parameter:state[bool]\n                \n\n                If the state is set to 1, Live simulates pressing the clip start\n                button until the state is set to 0, or until the clip is otherwise\n                stopped."
            },
            {
                "title": "set_notes",
                "description": "Parameter:list_of_notes[pitch, time,\n                duration, velocity, is_muted]\n                \n\n                Will apply the given notes to the clip, overwriting existing notes.\n                \n\n                An example sequence of calls looks like this:call set_notes\n                    \n\n                    call notes 2\n                    \n\n                    call note 60 0.0 0.5 100 0\n                    \n\n                    call note 62 0.5 0.5 64 0\n                    \n\n                    call doneFor MIDI clips only.Deprecated since Live 11.0.\n                    Please useadd_new_notesorapply_note_modificationsinstead."
            },
            {
                "title": "stop",
                "description": "Same effect as pressing the stop button of the track, but only if\n                this clip is actually playing or recording. If this\n                clip is triggered or if another clip in this track is playing, it\n                has no effect."
            },
            {
                "title": "stop_scrub",
                "description": "Stops an active scrub on a clip."
            }
        ]
    },
    {
        "title": "Clip.View",
        "description": "Representing the view aspects of a Clip.",
        "canonicalPath": "live_set tracks N clip_slots M clip view",
        "Children": [],
        "Properties": [
            {
                "title": "grid_is_triplet",
                "type": "bool",
                "access": [
                    "get",
                    "set"
                ],
                "description": "Get/set whether the clip is displayed with a\n                triplet grid."
            },
            {
                "title": "grid_quantization",
                "type": "int",
                "access": [
                    "get",
                    "set"
                ],
                "description": "Get/set the grid quantization."
            }
        ],
        "Functions": [
            {
                "title": "hide_envelope",
                "description": "Hide the Envelopes box."
            },
            {
                "title": "select_envelope_parameter",
                "description": "Parameter: [DeviceParameter]\n                \n\n                Select the specified device parameter in the Envelopes box."
            },
            {
                "title": "show_envelope",
                "description": "Show the Envelopes box."
            },
            {
                "title": "show_loop",
                "description": "If the clip is visible in Live's Detail View, this function will\n                make the\n                current loop visible there."
            }
        ]
    },
    {
        "title": "Groove",
        "description": "This class represents a groove in Live.Available since Live 11.0.All grooves are stored in Live's groove pool.",
        "canonicalPath": "live_set groove_pool grooves N",
        "Children": [
            {
                "title": "base",
                "type": "int",
                "access": [
                    "get",
                    "set"
                ],
                "description": "Get/set the groove's base grid (index based setter).\n                \n\n                0 = 1/4\n                \n\n                1 = 1/8\n                \n\n                2 = 1/8T\n                \n\n                3 = 1/16\n                \n\n                4 = 1/16T\n                \n\n                5 = 1/32"
            },
            {
                "title": "name",
                "type": "symbol",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "Get/set/observe the name of the groove."
            },
            {
                "title": "quantization_amount",
                "type": "float",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "Get/set/observe the groove's quantization amount."
            },
            {
                "title": "random_amount",
                "type": "float",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "Get/set/observe the groove's random amount."
            },
            {
                "title": "timing_amount",
                "type": "float",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "Get/set/observe the groove's timing amount."
            },
            {
                "title": "velocity_amount",
                "type": "float",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "Get/set/observe the groove's velocity amount."
            }
        ],
        "Properties": [],
        "Functions": []
    },
    {
        "title": "Device",
        "description": "This class represents a MIDI or audio device in Live.",
        "canonicalPath": "live_set tracks N devices M",
        "Children": [
            {
                "title": "parameters",
                "type": "list ofDeviceParameter",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "Only automatable parameters are accessible. SeeDeviceParameterto learn how to modify them."
            },
            {
                "title": "view",
                "type": "Device.View",
                "access": [
                    "get"
                ],
                "description": ""
            }
        ],
        "Properties": [
            {
                "title": "can_have_chains",
                "type": "bool",
                "access": [
                    "get"
                ],
                "description": "0 for a single device\n                \n\n                1 for a device Rack"
            },
            {
                "title": "can_have_drum_pads",
                "type": "bool",
                "access": [
                    "get"
                ],
                "description": "1 for Drum Racks"
            },
            {
                "title": "class_display_name",
                "type": "symbol",
                "access": [
                    "get"
                ],
                "description": "Get the original name of the device (e.g.Operator,Auto\n                    Filter)."
            },
            {
                "title": "class_name",
                "type": "symbol",
                "access": [
                    "get"
                ],
                "description": "Live device type such asMidiChord,Operator,Limiter,MxDeviceAudioEffect, orPluginDevice."
            },
            {
                "title": "is_active",
                "type": "bool",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "0 = either the device itself or its enclosing\n                Rack device is off."
            },
            {
                "title": "name",
                "type": "symbol",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "This is the string shown in the title bar of the\n                device."
            },
            {
                "title": "type",
                "type": "int",
                "access": [
                    "get"
                ],
                "description": "The type of the device. Possible types are: 0 = undefined, 1 =\n                instrument,\n                2 = audio_effect, 4 = midi_effect."
            },
            {
                "title": "latency_in_samples",
                "type": "int",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "Device latency in samples."
            },
            {
                "title": "latency_in_ms",
                "type": "float",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "Device latency in milliseconds."
            }
        ],
        "Functions": [
            {
                "title": "store_chosen_bank",
                "description": "Parameters:script_index[int]bank_index[int]\n                \n\n                (This is related to hardware control surfaces and is usually not\n                relevant.)"
            }
        ]
    },
    {
        "title": "Device.View",
        "description": "Representing the view aspects of a Device.",
        "canonicalPath": "live_set tracks N devices M view",
        "Children": [],
        "Properties": [
            {
                "title": "is_collapsed",
                "type": "bool",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "1 = the device is shown collapsed in the device\n                chain."
            }
        ],
        "Functions": []
    },
    {
        "title": "DeviceParameter",
        "description": "This class represents an (automatable) parameter within a MIDI or audio\n        device. To modify a device parameter, set itsvalueproperty or send its object ID tolive.remote~.",
        "canonicalPath": "live_set tracks N devices M parameters L",
        "Children": [],
        "Properties": [
            {
                "title": "automation_state",
                "type": "int",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "Get the automation state of the parameter.\n                \n\n                0 = no automation.\n                \n\n                1 = automation active.\n                \n\n                2 = automation overridden."
            },
            {
                "title": "default_value",
                "type": "float",
                "access": [
                    "get"
                ],
                "description": "Get the default value for this parameter.\n                \n\n                Only available for parameters that aren't quantized (seeis_quantized)."
            },
            {
                "title": "is_enabled",
                "type": "bool",
                "access": [
                    "get"
                ],
                "description": "1 = the parameter value can be modified directly by the user, by\n                sendingsetto alive.object, by automation or by an assigned MIDI message or keystroke.\n                \n\n                Parameters can be disabled because they are macro-controlled, or\n                they are controlled by a live-remote~ object,\n                or because Live thinks that they should not be moved."
            },
            {
                "title": "is_quantized",
                "type": "bool",
                "access": [
                    "get"
                ],
                "description": "1 for booleans and enums\n                \n\n                0 for int/float parameters\n                \n\n                Although parameters like MidiPitch.Pitch appear quantized to the\n                user, they actually have an is_quantized value of 0."
            },
            {
                "title": "max",
                "type": "float",
                "access": [
                    "get"
                ],
                "description": "Largest allowed value."
            },
            {
                "title": "min",
                "type": "float",
                "access": [
                    "get"
                ],
                "description": "Lowest allowed value."
            },
            {
                "title": "name",
                "type": "symbol",
                "access": [
                    "get"
                ],
                "description": "The short parameter name as shown in the\n                (closed) automation chooser."
            },
            {
                "title": "original_name",
                "type": "symbol",
                "access": [
                    "get"
                ],
                "description": "The name of a Macro parameter before its\n                assignment."
            },
            {
                "title": "state",
                "type": "int",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "The active state of the parameter.\n                \n\n                0 = the parameter is active and can be changed.\n                \n\n                1 = the parameter can be changed but isn't active, so changes won't\n                have an audible effect.\n                \n\n                2 = the parameter cannot be changed."
            },
            {
                "title": "value",
                "type": "float",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "Linear-to-GUI value between min and max."
            },
            {
                "title": "value_items",
                "type": "StringVector",
                "access": [
                    "get"
                ],
                "description": "Get a list of the possible values for this parameter.\n                \n\n                Only available for parameters that are quantized (seeis_quantized)."
            }
        ],
        "Functions": [
            {
                "title": "re_enable_automation",
                "description": "Re-enable automation for this parameter."
            },
            {
                "title": "str_for_value",
                "description": "Parameter:value[float]\n                Returns: [symbol] String representation of the specified value."
            },
            {
                "title": "__str__",
                "description": "Returns: [symbol] String representation of the current parameter\n                value."
            }
        ]
    },
    {
        "title": "RackDevice",
        "description": "This class represents a Live Rack Device.\n        \n\n        A RackDevice is a type of Device, meaning that it has all the children,\n        properties and functions that a Device has. Listed below are members unique\n        to RackDevice.",
        "canonicalPath": null,
        "Children": [
            {
                "title": "chain_selector",
                "type": "DeviceParameter",
                "access": [
                    "get"
                ],
                "description": "Convenience accessor for the Rack's chain\n                selector."
            },
            {
                "title": "chains",
                "type": "list ofChain",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "The Rack's chains."
            },
            {
                "title": "drum_pads",
                "type": "list ofDrumPad",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "All 128 Drum Pads for the topmost Drum Rack. Inner Drum\n                Racks return a list of 0 entries."
            },
            {
                "title": "return_chains",
                "type": "list ofChain",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "The Rack's return chains."
            },
            {
                "title": "visible_drum_pads",
                "type": "list ofDrumPad",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "All 16 visible DrumPads for the topmost Drum Rack. Inner Drum Racks\n                return a list of 0 entries."
            }
        ],
        "Properties": [
            {
                "title": "can_show_chains",
                "type": "bool",
                "access": [
                    "get"
                ],
                "description": "1 = The Rack contains an instrument device that is capable of\n                showing\n                its chains in Session View."
            },
            {
                "title": "has_drum_pads",
                "type": "bool",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "1 = the device is a Drum Rack with pads. A nested Drum Rack is a\n                Drum Rack without pads.\n                \n\n                Only available for Drum Racks."
            },
            {
                "title": "has_macro_mappings",
                "type": "bool",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "1 = any of a Rack's Macros are mapped to a parameter."
            },
            {
                "title": "is_showing_chains",
                "type": "bool",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "1 = The Rack contains an instrument device that is showing\n                its chains in Session View."
            },
            {
                "title": "variation_count",
                "type": "int",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "The number of currently stored macro variations.Available since Live 11.0."
            },
            {
                "title": "selected_variation_index",
                "type": "int",
                "access": [
                    "get",
                    "set"
                ],
                "description": "Get/set the currently selected variation.Available since Live 11.0."
            },
            {
                "title": "visible_macro_count",
                "type": "int",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "The number of currently visible macros."
            }
        ],
        "Functions": [
            {
                "title": "copy_pad",
                "description": "Parameters:source_index[int]destination_index[int]\n                \n\n                Copies all content of a Drum Rack pad from a source pad to a\n                destination pad.\n                The source_index and destination_index refer to pad indices inside a\n                Drum Rack."
            },
            {
                "title": "add_macro",
                "description": "Increases the number of visible macro controls.Available since Live 11.0."
            },
            {
                "title": "remove_macro",
                "description": "Decreases the number of visible macro controls.Available since Live 11.0."
            },
            {
                "title": "randomize_macros",
                "description": "Randomizes the values of eligible macro controls.Available since Live 11.0."
            },
            {
                "title": "store_variation",
                "description": "Stores a new variation of the values of all currently mapped macros.Available since Live 11.0."
            },
            {
                "title": "recall_selected_variation",
                "description": "Recalls the currently selected macro variation.Available since Live 11.0."
            },
            {
                "title": "recall_last_used_variation",
                "description": "Recalls the macro variation that was recalled most recently.Available since Live 11.0."
            },
            {
                "title": "delete_selected_variation",
                "description": "Deletes the currently selected macro variation.\n                Does nothing if there is no selected variation.Available since Live 11.0."
            }
        ]
    },
    {
        "title": "RackDevice.View",
        "description": "Represents the view aspects of a Rack Device.\n        \n\n        A RackDevice.View is a type of Device.View, meaning that it has all the\n        properties that a Device.View has. Listed below are the members unique to\n        RackDevice.View.",
        "canonicalPath": null,
        "Children": [
            {
                "title": "selected_drum_pad",
                "type": "DrumPad",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "Currently selected Drum Rack pad.\n                \n\n                Only available for Drum Racks."
            },
            {
                "title": "selected_chain",
                "type": "Chain",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "Currently selected chain."
            }
        ],
        "Properties": [
            {
                "title": "drum_pads_scroll_position",
                "type": "int",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "Lowest row of pads visible, range: 0 - 28.\n                \n\n                Only available for Drum Racks."
            },
            {
                "title": "is_showing_chain_devices",
                "type": "bool",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "1 = the devices in the currently selected chain are visible."
            }
        ],
        "Functions": []
    },
    {
        "title": "DrumPad",
        "description": "This class represents a Drum Rack pad in Live.",
        "canonicalPath": "live_set tracks N devices M drum_pads L",
        "Children": [
            {
                "title": "chains",
                "type": "Chain",
                "access": [
                    "get",
                    "observe"
                ],
                "description": ""
            }
        ],
        "Properties": [
            {
                "title": "mute",
                "type": "bool",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "1 = muted"
            },
            {
                "title": "name",
                "type": "symbol",
                "access": [
                    "get",
                    "observe"
                ],
                "description": ""
            },
            {
                "title": "note",
                "type": "int",
                "access": [
                    "get"
                ],
                "description": ""
            },
            {
                "title": "solo",
                "type": "bool",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "1 = soloed (Solo switch on)\n                \n\n                Does not automatically turn Solo off in other chains."
            }
        ],
        "Functions": [
            {
                "title": "delete_all_chains",
                "description": ""
            }
        ]
    },
    {
        "title": "Chain",
        "description": "This class represents a group device chain in Live.",
        "canonicalPath": "live_set tracks N devices M chains L",
        "Children": [
            {
                "title": "devices",
                "type": "Device",
                "access": [
                    "get",
                    "observe"
                ],
                "description": ""
            },
            {
                "title": "mixer_device",
                "type": "ChainMixerDevice",
                "access": [
                    "get"
                ],
                "description": ""
            }
        ],
        "Properties": [
            {
                "title": "color",
                "type": "int",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "The RGB value of the chain's color in the form0x00rrggbbor (2^16 * red) + (2^8) * green + blue, where red, green and blue\n                are\n                values from 0 (dark) to 255 (light).\n                \n\n                \n\n                When setting the RGB value, the nearest color from the color\n                chooser is taken."
            },
            {
                "title": "color_index",
                "type": "long",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "The color index of the chain."
            },
            {
                "title": "is_auto_colored",
                "type": "bool",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "1 = the chain will always have the color of the containing track or\n                chain."
            },
            {
                "title": "has_audio_input",
                "type": "bool",
                "access": [
                    "get"
                ],
                "description": ""
            },
            {
                "title": "has_audio_output",
                "type": "bool",
                "access": [
                    "get"
                ],
                "description": ""
            },
            {
                "title": "has_midi_input",
                "type": "bool",
                "access": [
                    "get"
                ],
                "description": ""
            },
            {
                "title": "has_midi_output",
                "type": "bool",
                "access": [
                    "get"
                ],
                "description": ""
            },
            {
                "title": "mute",
                "type": "bool",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "1 = muted (Chain Activator off)"
            },
            {
                "title": "muted_via_solo",
                "type": "bool",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "1 = muted due to another chain being soloed."
            },
            {
                "title": "name",
                "type": "unicode",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": ""
            },
            {
                "title": "solo",
                "type": "bool",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "1 = soloed (Solo switch on)\n                \n\n                does not automatically turn Solo off in other chains."
            }
        ],
        "Functions": [
            {
                "title": "delete_device",
                "description": "Parameter:index[int]\n                \n\n                Delete the device at the given index."
            }
        ]
    },
    {
        "title": "DrumChain",
        "description": "This class represents a Drum Rack device chain in Live.\n        \n\n        \n\n        A DrumChain is a type of Chain, meaning that it has all the children,\n        properties and functions that a Chain has. Listed below are the members\n        unique to DrumChain.",
        "canonicalPath": null,
        "Children": [],
        "Properties": [
            {
                "title": "out_note",
                "type": "int",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "Get/set the MIDI note sent to the devices in the chain."
            },
            {
                "title": "choke_group",
                "type": "int",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "Get/set the chain's choke group."
            }
        ],
        "Functions": []
    },
    {
        "title": "ChainMixerDevice",
        "description": "This class represents a chain's mixer device in Live.",
        "canonicalPath": "live_set tracks N devices M chains L mixer_device",
        "Children": [
            {
                "title": "sends",
                "type": "list ofDeviceParameter",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "[in Audio Effect Racks and Instrument Racks only]\n                \n\n                For Drum Racks, otherwise empty."
            },
            {
                "title": "chain_activator",
                "type": "DeviceParameter",
                "access": [
                    "get"
                ],
                "description": ""
            },
            {
                "title": "panning",
                "type": "DeviceParameter",
                "access": [
                    "get"
                ],
                "description": "[in Audio Effect Racks and Instrument Racks\n                only]"
            },
            {
                "title": "volume",
                "type": "DeviceParameter",
                "access": [
                    "get"
                ],
                "description": "[in Audio Effect Racks and Instrument Racks\n                only]"
            }
        ],
        "Properties": [],
        "Functions": []
    },
    {
        "title": "ShifterDevice",
        "description": "This class represents an instance of the Shifter audio effect.\n        \n\n        A ShifterDevice is a type of device, meaning that it has all the children,\n        properties and functions that a device has. Listed below are members unique\n        to ShifterDevice.",
        "canonicalPath": null,
        "Children": [],
        "Properties": [
            {
                "title": "pitch_bend_range",
                "type": "int",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "The pitch bend range used in MIDI Pitch Mode."
            },
            {
                "title": "pitch_mode_index",
                "type": "int",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "The current pitch mode index: 0 = Internal, 1 = MIDI"
            }
        ],
        "Functions": []
    },
    {
        "title": "SimplerDevice",
        "description": "This class represents an instance of Simpler.\n        \n\n        A SimplerDevice is a type of device, meaning that it has all the children,\n        properties and functions that a device has. Listed below are members unique\n        to SimplerDevice.",
        "canonicalPath": null,
        "Children": [
            {
                "title": "sample",
                "type": "Sample",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "The sample currently loaded into Simpler."
            }
        ],
        "Properties": [
            {
                "title": "can_warp_as",
                "type": "bool",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "1 = warp_as is available."
            },
            {
                "title": "can_warp_double",
                "type": "bool",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "1 = warp_double is available."
            },
            {
                "title": "can_warp_half",
                "type": "bool",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "1 = warp_half is available."
            },
            {
                "title": "multi_sample_mode",
                "type": "bool",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "1 = Simpler is in multisample mode."
            },
            {
                "title": "pad_slicing",
                "type": "bool",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "1 = slices can be added in Slicing Mode by playing notes which are\n                not\n                yet assigned to existing slices."
            },
            {
                "title": "playback_mode",
                "type": "int",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "Get/set Simpler's playback mode.\n                \n\n                0 = Classic Mode\n                \n\n                1 = One-Shot Mode\n                \n\n                2 = Slicing Mode"
            },
            {
                "title": "playing_position",
                "type": "float",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "The current playing position in the sample, expressed as a value\n                between 0. and 1."
            },
            {
                "title": "playing_position_enabled",
                "type": "bool",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "1 = Simpler is playing back the sample and showing the playing\n                position."
            },
            {
                "title": "retrigger",
                "type": "bool",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "1 = Retrigger is enabled in Simpler."
            },
            {
                "title": "slicing_playback_mode",
                "type": "int",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "Get/set Simpler's Slicing Playback Mode.\n                \n\n                0 = Mono\n                \n\n                1 = Poly\n                \n\n                2 = Thru"
            },
            {
                "title": "voices",
                "type": "int",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "Get/set the number of Voices."
            }
        ],
        "Functions": [
            {
                "title": "crop",
                "description": "Crop the loaded sample to the active region between the start and\n                end markers."
            },
            {
                "title": "guess_playback_length",
                "description": "Returns: [float] An estimated beat time for the playback length\n                between the start and end markers."
            },
            {
                "title": "reverse",
                "description": "Reverse the loaded sample."
            },
            {
                "title": "warp_as",
                "description": "Parameters:beats[int]\n                \n\n                Warp the active region between the start and end markers as the\n                specified number of beats."
            },
            {
                "title": "warp_double",
                "description": "Double the playback tempo of the active region between the start and\n                end markers."
            },
            {
                "title": "warp_half",
                "description": "Halve the playback tempo for the active region between the start and\n                end markers."
            }
        ]
    },
    {
        "title": "SimplerDevice.View",
        "description": "Represents the view aspects of a SimplerDevice.\n        \n\n        A SimplerDevice.View is a type of Device.View, meaning that it has all the\n        properties that a Device.View has. Listed below are the members unique to\n        SimplerDevice.View.",
        "canonicalPath": null,
        "Children": [],
        "Properties": [
            {
                "title": "selected_slice",
                "type": "int",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "The currenctly selected slice, identified by its slice time."
            }
        ],
        "Functions": []
    },
    {
        "title": "Sample",
        "description": "This class represents a sample file loaded into Simpler.",
        "canonicalPath": "live_set tracks N devices N sample",
        "Children": [],
        "Properties": [
            {
                "title": "beats_granulation_resolution",
                "type": "int",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "Get/set which divisions to preserve in the sample in Beats Mode.\n                \n\n                0 = 1 Bar\n                \n\n                1 = 1/2\n                \n\n                2 = 1/4\n                \n\n\n                3 = 1/8\n                \n\n                4 = 1/16\n                \n\n                5 = 1/32\n                \n\n                6 = Transients"
            },
            {
                "title": "beats_transient_envelope",
                "type": "float",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "Get/set the duration of a volume fade applied to each segment of\n                audio in Beats Mode.\n                \n\n                \n\n                0 = fastest decay\n                \n\n                100 = no fade"
            },
            {
                "title": "beats_transient_loop_mode",
                "type": "int",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "Get/set the Transient Loop Mode applied to each segment of audio in\n                Beats Mode.\n                \n\n                0 = Off\n                \n\n                1 = Loop Forward\n                \n\n                2 = Loop Back-and-Forth"
            },
            {
                "title": "complex_pro_envelope",
                "type": "float",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "Get/set the Envelope parameter in Complex Pro Mode."
            },
            {
                "title": "complex_pro_formants",
                "type": "float",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "Get/set the Formants parameter in Complex Pro Mode."
            },
            {
                "title": "end_marker",
                "type": "int",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "Get/set the position of the sample's end marker."
            },
            {
                "title": "file_path",
                "type": "unicode",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "Get the path of the sample file."
            },
            {
                "title": "gain",
                "type": "float",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "Get/set the sample gain."
            },
            {
                "title": "length",
                "type": "int",
                "access": [
                    "get"
                ],
                "description": "Get the length of the sample file in sample frames."
            },
            {
                "title": "sample_rate",
                "type": "int",
                "access": [
                    "get"
                ],
                "description": "The sample rate of the loaded sample.Available since Live 11.0."
            },
            {
                "title": "slices",
                "type": "list ofint",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "The positions of all playable slices in the sample, in sample\n                frames. Divide these values by thesample_rateto get the slice\n                times in seconds.Available since Live 11.0."
            },
            {
                "title": "slicing_sensitivity",
                "type": "float",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "Get/set the slicing sensitivity. Values are between 0.0 and 1.0."
            },
            {
                "title": "start_marker",
                "type": "int",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "Get/set the position of the sample's start marker."
            },
            {
                "title": "texture_flux",
                "type": "float",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "Get/set the Flux parameter in Texture Mode."
            },
            {
                "title": "texture_grain_size",
                "type": "float",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "Get/set the Grain Size parameter in Texture Mode."
            },
            {
                "title": "tones_grain_size",
                "type": "float",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "Get/set the Grain Size parameter in Tones Mode."
            },
            {
                "title": "warp_markers",
                "type": "dict/bang",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "The Sample's Warp Markers as a dict. Observing this property bangs\n                when the warp_markers change.\n\n                \n\n                The last Warp Marker in the dict is not visible in the Live\n                interface. This hidden, or \"shadow\" marker is used to calculate the\n                BPM of the last segment.Available since Live 11.0."
            },
            {
                "title": "warp_mode",
                "type": "int",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "Get/set the Warp Mode.\n                \n\n                0 = Beats Mode\n                \n\n                1 = Tones Mode\n                \n\n                2 = Texture Mode\n                \n\n                3 = Re-Pitch Mode\n                \n\n                4 = Complex Mode\n                \n\n                6 = Complex Pro Mode"
            },
            {
                "title": "warping",
                "type": "bool",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "1 = warping is enabled."
            },
            {
                "title": "slicing_style",
                "type": "int",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "Get/set the Slicing Mode.\n                \n\n                0 = Transient\n                \n\n                1 = Beat\n                \n\n                2 = Region\n                \n\n                3 = Manual"
            },
            {
                "title": "slicing_beat_division",
                "type": "int",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "Get/set the slice beat division in Beat Slicing Mode.\n                \n\n                0 = 1/16\n                \n\n                1 = 1/16T\n                \n\n                2 = 1/8\n                \n\n                3 = 1/8T\n                \n\n                4 = 1/4\n                \n\n                5 = 1/4T\n                \n\n                6 = 1/2\n                \n\n                7 = 1/2T\n                \n\n                8 = 1 Bar\n                \n\n                9 = 2 Bars\n                \n\n                10 = 4 Bars"
            },
            {
                "title": "slicing_region_count",
                "type": "int",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "Get/set the number of slice regions in Region Slicing Mode."
            }
        ],
        "Functions": [
            {
                "title": "gain_display_string",
                "description": "Returns: [list of symbols] The sample's gain value as a string, e.g.\n                \"0.0 dB\"."
            },
            {
                "title": "insert_slice",
                "description": "Parameters:slice_time[int]\n                \n\n                Insert a new slice at the specified time if there is none."
            },
            {
                "title": "move_slice",
                "description": "Parameters:source_time[int]destination_time[int]\n                \n\n                Move an existing slice to a specified time."
            },
            {
                "title": "remove_slice",
                "description": "Parameters:slice_time[int]\n                \n\n                Remove a slice at the specified time if it exists."
            },
            {
                "title": "clear_slices",
                "description": "Clear all slices created in Manual Slicing Mode."
            },
            {
                "title": "reset_slices",
                "description": "Reset all edited slices to their original positions."
            }
        ]
    },
    {
        "title": "WavetableDevice",
        "description": "This class represents a Wavetable instrument.\n        \n\n        \n\n        A WavetableDevice shares all of the children, functions and properties that\n        a Device has. Listed below\n        are members unique to it.",
        "canonicalPath": null,
        "Children": [],
        "Properties": [
            {
                "title": "filter_routing",
                "type": "int",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "Access to the current filter routing. 0 = Serial,\n                1 = Parallel, 2 = Split."
            },
            {
                "title": "mono_poly",
                "type": "int",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "Access to Wavetable's Poly/Mono switch. 0 = Mono,\n                1 = Poly."
            },
            {
                "title": "oscillator_1_effect_mode",
                "type": "int",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "Access to oscillator 1's effect mode. 0 = None, 1 = Fm, 2 = Classic,\n                3 = Modern."
            },
            {
                "title": "oscillator_2_effect_mode",
                "type": "int",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "Access to oscillator 2's effect mode."
            },
            {
                "title": "oscillator_1_wavetable_category",
                "type": "",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "Access to oscillator 1's wavetable category\n                selector."
            },
            {
                "title": "oscillator_2_wavetable_category",
                "type": "",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "Access to oscillator 2's wavetable category\n                selector."
            },
            {
                "title": "oscillator_1_wavetable_index",
                "type": "",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "Access to oscillator 1's wavetable index\n                selector."
            },
            {
                "title": "oscillator_2_wavetable_index",
                "type": "",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "Access to oscillator 2's wavetable index\n                selector."
            },
            {
                "title": "oscillator_1_wavetables",
                "type": "StringVector",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "List of names of the wavetables currently available for oscillator\n                1.\n                Depends on the current wavetable category selection (seeoscillator_1_wavetable_category)."
            },
            {
                "title": "oscillator_2_wavetables",
                "type": "StringVector",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "List of names of the wavetables currently available for oscillator\n                2.\n                Depends on the current wavetable category selection (seeoscillator_2_wavetable_category)."
            },
            {
                "title": "oscillator_wavetable_categories",
                "type": "StringVector",
                "access": [
                    "get"
                ],
                "description": "List of the names of the available wavetable\n                categories."
            },
            {
                "title": "poly_voices",
                "type": "int",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "The current number of polyphonic voices."
            },
            {
                "title": "unison_mode",
                "type": "int",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "Access to Wavetable's unison mode parameter.\n                \n\n                \n\n                0 = None\n                \n\n                1 = Classic\n                \n\n                2 = Shimmer\n                \n\n                3 = Noise\n                \n\n                4 = Phase Sync\n                \n\n                5 = Position Spread\n                \n\n                6 = Random Note"
            },
            {
                "title": "unison_voice_count",
                "type": "int",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "Access to the number of unison voices."
            },
            {
                "title": "visible_modulation_target_names",
                "type": "StringVector",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "List of the names of modulation targets currently\n                visible in the modulation matrix."
            }
        ],
        "Functions": [
            {
                "title": "add_parameter_to_modulation_matrix",
                "description": "Parameter:parameter_to_add[DeviceParameter]\n                \n\n                Add an instrument parameter to the modulation matrix. Only works for\n                parameters that can be modulated (seeis_parameter_modulatable)."
            },
            {
                "title": "get_modulation_target_parameter_name",
                "description": "Parameter:index[int]\n                \n\n                Return the modulation target parameter name atindexin the\n                modulation matrix as a [symbol]."
            },
            {
                "title": "get_modulation_value",
                "description": "Parameters:modulation_target_index[int]modulation_source_index[int]\n                \n\n                Return the amount of the modulation of the parameter atmodulation_target_indexby the\n                modulation source atmodulation_source_indexin\n                Wavetable's modulation matrix."
            },
            {
                "title": "is_parameter_modulatable",
                "description": "Parameter:parameter[DeviceParameter]\n                \n\n                1 =parametercan be modulated. Call\n                this beforeadd_parameter_to_modulation_matrix."
            },
            {
                "title": "set_modulation_value",
                "description": "Parameters:modulation_target_index[int]modulation_source_index[int]\n                \n\n                Set the amount of the modulation of the parameter atmodulation_target_indexby the\n                modulation source atmodulation_source_indexin\n                Wavetable's modulation matrix."
            }
        ]
    },
    {
        "title": "CompressorDevice",
        "description": "This class represents a Compressor device in Live.\n        \n\n        A CompressorDevice shares all of the children, functions and properties of a\n        Device; listed below are the\n        members unique to it.",
        "canonicalPath": null,
        "Children": [],
        "Properties": [
            {
                "title": "available_input_routing_channels",
                "type": "dict",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "The list of available source channels for the compressor's input\n                routing in the sidechain.\n                It's represented as a dictionary with the following key:available_input_routing_channels[list]\n                \n\n                The list contains dictionaries as described ininput_routing_channel."
            },
            {
                "title": "available_input_routing_types",
                "type": "dict",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "The list of available source types for the compressor's input\n                routing in the sidechain.\n                It's represented as a dictionary with the following key:available_input_routing_types[list]\n                \n\n                The list contains dictionaries as described ininput_routing_type."
            },
            {
                "title": "input_routing_channel",
                "type": "dict",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "The currently selected source channel for the compressor's input\n                routing in the sidechain.\n                It's represented as a dictionary with the following keys:display_name[symbol]identifier[symbol]\n                \n\n                Can be set to all values found in the compressor'savailable_input_routing_channels."
            },
            {
                "title": "input_routing_type",
                "type": "dict",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "The currently selected source type for the compressor's input\n                routing in the sidechain.\n                It's represented as a dictionary with the following keys:display_name[symbol]identifier[symbol]\n                \n\n                Can be set to all values found in the track'savailable_input_routing_types."
            }
        ],
        "Functions": []
    },
    {
        "title": "PluginDevice",
        "description": "This class represents a plug-in device.\n        \n\n        \n\n        A PluginDevice is a type of Device, meaning that it has all the children,\n        properties and functions that a Device has. Listed below are the members\n        unique to PluginDevice.",
        "canonicalPath": null,
        "Children": [],
        "Properties": [
            {
                "title": "presets",
                "type": "StringVector",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "Get the list of the plug-in's presets."
            },
            {
                "title": "selected_preset_index",
                "type": "int",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "Get/set the index of the currently selected preset."
            }
        ],
        "Functions": []
    },
    {
        "title": "MaxDevice",
        "description": "This class represents a Max for Live device in Live.\n        \n\n        \n\n        A MaxDevice is a type of Device, meaning that it has all the children,\n        properties and functions that a Device has. Listed below are the members\n        unique to MaxDevice.",
        "canonicalPath": null,
        "Children": [],
        "Properties": [
            {
                "title": "audio_inputs",
                "type": "list ofDeviceIO",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "List of the audio inputs that the MaxDevice offers."
            },
            {
                "title": "audio_outputs",
                "type": "list ofDeviceIO",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "List of the audio outputs that the MaxDevice offers."
            },
            {
                "title": "midi_inputs",
                "type": "list ofDeviceIO",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "List of the midi inputs that the MaxDevice offers.Available since Live 11.0."
            },
            {
                "title": "midi_outputs",
                "type": "list ofDeviceIO",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "List of the midi outputs that the MaxDevice offers.Available since Live 11.0."
            }
        ],
        "Functions": [
            {
                "title": "get_bank_count",
                "description": "Returns: [int] the number of parameter banks."
            },
            {
                "title": "get_bank_name",
                "description": "Parameters:bank_index[int]\n                \n\n                Returns: [list of symbols] The name of the parameter bank specified\n                by bank_index."
            },
            {
                "title": "get_bank_parameters",
                "description": "Parameters:bank_index[int]\n                \n\n                Returns: [list of ints] The indices of the parameters contained in\n                the bank specified by bank_index. Empty slots are marked as -1. Bank\n                index -1 refers to the \"Best of\" bank."
            }
        ]
    },
    {
        "title": "MixerDevice",
        "description": "This class represents a mixer device in Live. It provides access to\n        volume, panning and otherDeviceParameterobjects. SeeDeviceParameterto learn how to modify them.",
        "canonicalPath": "live_set tracks N mixer_device",
        "Children": [
            {
                "title": "sends",
                "type": "list ofDeviceParameter",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "One send per return track."
            },
            {
                "title": "cue_volume",
                "type": "DeviceParameter",
                "access": [
                    "get"
                ],
                "description": "[in master track only]"
            },
            {
                "title": "crossfader",
                "type": "DeviceParameter",
                "access": [
                    "get"
                ],
                "description": "[in master track only]"
            },
            {
                "title": "left_split_stereo",
                "type": "DeviceParameter",
                "access": [
                    "get"
                ],
                "description": "The Track's Left Split Stereo Pan Parameter."
            },
            {
                "title": "panning",
                "type": "DeviceParameter",
                "access": [
                    "get"
                ],
                "description": ""
            },
            {
                "title": "right_split_stereo",
                "type": "DeviceParameter",
                "access": [
                    "get"
                ],
                "description": "The Track's Right Split Stereo Pan Parameter."
            },
            {
                "title": "song_tempo",
                "type": "DeviceParameter",
                "access": [
                    "get"
                ],
                "description": "[in master track only]"
            },
            {
                "title": "track_activator",
                "type": "DeviceParameter",
                "access": [
                    "get"
                ],
                "description": ""
            },
            {
                "title": "volume",
                "type": "DeviceParameter",
                "access": [
                    "get"
                ],
                "description": ""
            }
        ],
        "Properties": [
            {
                "title": "crossfade_assign",
                "type": "int",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "0 = A, 1 = none, 2 = B [not in master track]"
            },
            {
                "title": "panning_mode",
                "type": "int",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "Access to the Track mixer's pan mode: 0 = Stereo, 1 = Split Stereo."
            }
        ],
        "Functions": []
    },
    {
        "title": "Eq8Device",
        "description": "This class represents an instance of an EQ Eight device in Live.\n        \n\n        An Eq8Device has all the properties, functions and children of a Device.\n        Listed below are members unique to Eq8Device.",
        "canonicalPath": null,
        "Children": [],
        "Properties": [
            {
                "title": "edit_mode",
                "type": "bool",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "Access to EQ Eight's edit mode, which toggles the channel currently\n                available for editing. The available edit modes depend on the global\n                mode\n                (seeglobal_mode) and are encoded as\n                follows:\n                \n\n                \n\n                In L/R mode: 0 = L, 1 = R\n                \n\n                In M/S mode: 0 = M, 1 = S\n                \n\n                In Stereo mode: 0 = A, 1 = B (inactive)"
            },
            {
                "title": "global_mode",
                "type": "int",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "Access to EQ Eight's global mode. The modes are encoded as follows:\n                \n\n                \n\n                0 = Stereo\n                \n\n                1 = L/R\n                \n\n                2 = M/S"
            },
            {
                "title": "oversample",
                "type": "bool",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "Access to EQ Eight's Oversampling parameter. 0 = Off, 1 = On."
            }
        ],
        "Functions": []
    },
    {
        "title": "Eq8Device.View",
        "description": "Represents the view aspects of an Eq8Device.\n        \n\n        An Eq8Device.View has all the children, properties and functions of a\n        Device.View.\n        Listed below are members unique to it.",
        "canonicalPath": null,
        "Children": [],
        "Properties": [
            {
                "title": "selected_band",
                "type": "int",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "The index of the currently selected filter band."
            }
        ],
        "Functions": []
    },
    {
        "title": "HybridReverbDevice",
        "description": "This class represents an instance of a Hybrid Reverb device in Live.\n        \n\n        A HybridReverbDevice has all the properties, functions and children of a\n        Device.\n        Listed below are members unique to HybridReverbDevice.",
        "canonicalPath": null,
        "Children": [],
        "Properties": [
            {
                "title": "ir_attack_time",
                "type": "float",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "The attack time of the amplitude envelope for the impulse response,\n                in seconds."
            },
            {
                "title": "ir_category_index",
                "type": "int",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "The index of the selected impulse response category."
            },
            {
                "title": "ir_category_list",
                "type": "StringVector",
                "access": [
                    "get"
                ],
                "description": "The list of impulse response categories."
            },
            {
                "title": "ir_decay_time",
                "type": "float",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "The decay time of the amplitude envelope for the impulse response,\n                in seconds."
            },
            {
                "title": "ir_file_index",
                "type": "int",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "The index of the selected impulse response files from the current\n                category."
            },
            {
                "title": "ir_file_list",
                "type": "StringVector",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "The list of impulse response files from the selected category."
            },
            {
                "title": "ir_size_factor",
                "type": "float",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "The relative size of the impulse response, 0.0 to 1.0."
            },
            {
                "title": "ir_time_shaping_on",
                "type": "bool",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "Enables transforming the current selected impulse response with an\n                amplitude envelope and size parameter.\n                \n\n                1 = enabled."
            }
        ],
        "Functions": []
    },
    {
        "title": "SpectralResonatorDevice",
        "description": "This class represents an instance of a Spectral Resonator device in Live.\n        \n\n        An SpectralResonatorDevice has all the properties, functions and children of\n        a Device.\n        Listed below are members unique to SpectralResonatorDevice.",
        "canonicalPath": null,
        "Children": [],
        "Properties": [
            {
                "title": "frequency_dial_mode",
                "type": "int",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "Get, set and observe the Freq control's mode.\n\n                0 = Hertz, 1 = MIDI note values."
            },
            {
                "title": "midi_gate",
                "type": "int",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "Get, set and observe the MIDI gate switch's state.\n\n                0 = Off, 1 = On."
            },
            {
                "title": "mod_mode",
                "type": "int",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "Get, set and observe the Modulation Mode.\n\n                0 = None, 1 = Chorus, 2 = Wander, 3 = Granular."
            },
            {
                "title": "mono_poly",
                "type": "int",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "Get, set and observe the Mono/Poly switch's state.\n\n                0 = Mono, 1 = Poly."
            },
            {
                "title": "pitch_mode",
                "type": "int",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "Get, set and observe the Pitch Mode.\n\n                0 = Internal, 1 = MIDI."
            },
            {
                "title": "pitch_bend_range",
                "type": "int",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "Get, set and observe the Pitch Bend Range."
            },
            {
                "title": "polyphony",
                "type": "int",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "Get, set and observe the Polyphony.\n\n                0 = 2, 1 = 4, 2 = 8, 3 = 16 voices."
            }
        ],
        "Functions": []
    },
    {
        "title": "DeviceIO",
        "description": "This class represents an input or output bus of a Live\n        device.",
        "canonicalPath": null,
        "Children": [],
        "Properties": [
            {
                "title": "available_routing_channels",
                "type": "dictionary",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "The available channels for this input/output bus.\n                The channels are represented as adictionarywith the\n                following key:available_routing_channels[list]\n                \n\n                The list containsdictionariesas described inrouting_channel."
            },
            {
                "title": "available_routing_types",
                "type": "dictionary",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "The available types for this input/output bus.\n                The types are represented as adictionarywith the\n                following key:available_routing_types[list]\n                \n\n                The list containsdictionariesas described inrouting_type."
            },
            {
                "title": "default_external_routing_channel_is_none",
                "type": "bool",
                "access": [
                    "get",
                    "set"
                ],
                "description": "1 = the default routing channel for External routing types is none.Available since Live 11.0."
            },
            {
                "title": "routing_channel",
                "type": "dictionary",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "The current routing channel for this input/output bus. It is\n                represented as adictionarywith the following keys:display_name[symbol]identifier[symbol]\n                \n\n                Can be set to any of the values found inavailable_routing_channels."
            },
            {
                "title": "routing_type",
                "type": "dictionary",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "The current routing type for this input/output bus. It is\n                represented as adictionarywith the following keys:display_name[symbol]identifier[symbol]\n                \n\n                Can be set to any of the values found inavailable_routing_types."
            }
        ],
        "Functions": []
    },
    {
        "title": "Scene",
        "description": "This class represents a series of clip slots in Live's\n        Session View matrix.",
        "canonicalPath": "live_set scenes N",
        "Children": [
            {
                "title": "clip_slots",
                "type": "list ofClipSlot",
                "access": [
                    "get",
                    "observe"
                ],
                "description": ""
            }
        ],
        "Properties": [
            {
                "title": "color",
                "type": "int",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "The RGB value of the scene's color in the form0x00rrggbbor (2^16 * red) + (2^8) * green + blue, where red, green and blue\n                are\n                values from 0 (dark) to 255 (light).\n                \n\n                \n\n                When setting the RGB value, the nearest color from the Scene color\n                chooser is taken."
            },
            {
                "title": "color_index",
                "type": "long",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "The color index of the scene."
            },
            {
                "title": "is_empty",
                "type": "bool",
                "access": [
                    "get"
                ],
                "description": "1 = none of the slots in the scene is filled."
            },
            {
                "title": "is_triggered",
                "type": "bool",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "1 = scene is blinking."
            },
            {
                "title": "name",
                "type": "symbol",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "The name of the scene."
            },
            {
                "title": "tempo",
                "type": "float",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "The scene's tempo.\n                \n\n                Returns -1 if the scene tempo is disabled."
            },
            {
                "title": "tempo_enabled",
                "type": "bool",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "The active state of the scene tempo.\n                \n\n                When disabled, the scene will use the song's tempo,\n                \n\n                and the tempo value returned will be -1."
            },
            {
                "title": "time_signature_numerator",
                "type": "int",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "The scene's time signature numerator.\n                \n\n                Returns -1 if the scene time signature is disabled."
            },
            {
                "title": "time_signature_denominator",
                "type": "int",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "The scene's time signature denominator.\n                \n\n                Returns -1 if the scene time signature is disabled."
            },
            {
                "title": "time_signature_enabled",
                "type": "bool",
                "access": [
                    "get",
                    "set",
                    "observe"
                ],
                "description": "The active state of the scene time signature.\n                \n\n                When disabled, the scene will use the song's time signature,\n                \n\n                and the time signature values returned will be -1."
            }
        ],
        "Functions": [
            {
                "title": "fire",
                "description": "Parameter:force_legato\n                    (optional)[bool]can_select_scene_on_launch\n                    (optional)[bool]\n                \n\n                Fire all clip slots contained within the scene and select this\n                scene.\n                \n\n                Starts recording of armed and empty tracks within a Group Track in\n                this scene if\n                Preferences->Launch->Start Recording on Scene Launch is ON.\n                \n\n                Calling with force_legato = 1 (default = 0) will launch all clips\n                immediately in Legato, independent of their launch mode.\n                \n\n                When calling with can_select_scene_on_launch = 0 (default = 1) the\n                scene\n                is fired without selecting it."
            },
            {
                "title": "fire_as_selected",
                "description": "Parameter:force_legato\n                    (optional)[bool]\n                \n\n                Fire the selected scene, then select the next scene.\n                \n\n                It doesn't matter on which scene you are calling this function.\n                \n\n                Calling with force_legato = 1 (default = 0) will launch all clips\n                immediately in Legato, independent of their launch mode."
            },
            {
                "title": "set_fire_button_state",
                "description": "Parameter:state[bool]\n                \n\n                If the state is set to 1, Live simulates pressing of scene button\n                until the state is set to 0 or until the scene is stopped otherwise."
            }
        ]
    },
    {
        "title": "CuePoint",
        "description": "Represents a locator in the Arrangement View.",
        "canonicalPath": "live_set cue_points N",
        "Children": [],
        "Properties": [
            {
                "title": "name",
                "type": "symbol",
                "access": [
                    "get",
                    "observe"
                ],
                "description": ""
            },
            {
                "title": "time",
                "type": "float",
                "access": [
                    "get",
                    "observe"
                ],
                "description": "Arrangement position of the marker in beats."
            }
        ],
        "Functions": [
            {
                "title": "jump",
                "description": "Set current Arrangement playback position to marker, quantized if\n                song\n                is playing."
            }
        ]
    },
    {
        "title": "ControlSurface",
        "description": "A ControlSurface can be reached either directly by the root pathcontrol_surfacesNor by getting a list of active control surface IDs,\n        via callingget control_surfaceson an Application object.\n        \n\n        The latter list is in the same order in which control surfaces appear in\n        Live's\n        Link/MIDI Preferences. Note the same order is not guaranteed when getting a\n        control surface\n        via thecontrol_surfacesNpath.\n        \n\n        \n\n        A control surface can be thought of as a software layer between the Live API\n        and, in this case,\n        Max for Live. Individiual controls on the surface are represented by objects\n        that can be grabbed\n        and released via Max for Live, to obtain and give back exclusive control\n        (seegrab_controlandrelease_control). In this way, parts of the hardware can be\n        controlled via Max for Live\n        while other parts can retain their default functionality.\n        \n\n        \n\n        Additionally, Live offers a specialMaxForLivecontrol\n        surface that has aregister_midi_controlfunction. Using this, Max for Live developers\n        can\n        set up entirely custom control surfaces by adding and grabbing arbitrary\n        controls.",
        "canonicalPath": "control_surfaces N",
        "Children": [],
        "Properties": [],
        "Functions": [
            {
                "title": "get_control",
                "description": "Parameter:nameReturns the control with the given name."
            },
            {
                "title": "get_control_names",
                "description": "Returns the list of all control names."
            },
            {
                "title": "grab_control",
                "description": "Parameter:controlTake ownership of thecontrol. This releases all standard\n                functionality of the control,\n                so that it can be used exclusively via Max for Live."
            },
            {
                "title": "grab_midi",
                "description": "Forward MIDI messages received from the control\n                surface to Max for Live."
            },
            {
                "title": "register_midi_control",
                "description": "Parameters:name[symbol]status[int]number[int]\n                \n\n                \n\n                (MaxForLivecontrol surface only) Register a MIDI control\n                defined bystatusandnumber. Supported status codes are144(note on),176(continuous control)\n                and224(pitchbend).\n                \n\n                Returns the LOM ID associated with the control.\n                \n\n                Once a control is registered and grabbed viagrab_control,\n                Live will forward associated\n                MIDI messages that it receives to Max for Live. Max for Live can\n                send values to the control (e.g.\n                to light an LED) by callingsend_valueon the control\n                object."
            },
            {
                "title": "release_control",
                "description": "Parameter:controlRe-establishes the standard functionality for the control."
            },
            {
                "title": "release_midi",
                "description": "Stop forwarding MIDI messages received from the\n                control surface to Max for Live."
            },
            {
                "title": "send_midi",
                "description": "Parameter:midi_message[list of int]\n                \n\n                Sendmidi_messageto the control surface."
            },
            {
                "title": "send_receive_sysex",
                "description": "Parameters:sysex_message[list of int]timeout[symbol, int]\n                \n\n                Sendsysex_messageto the control surface and await a\n                response.\n                \n\n                If the message is followed by the wordtimeoutand a float,\n                this sets\n                the response timeout accordingly. The default timeout value is 0.2.\n                \n\n                If the response times out and MIDI has not been grabbed viagrab_midi,\n                it's not forwarded to Max for Live. If MIDI has been grabbed via Max\n                for Live,\n                received messages are always forwarded, but the timeout is still\n                reported."
            }
        ]
    },
    {
        "title": "this_device",
        "description": "This root path represents the device containing thelive.pathobject to which thegoto\n            this_devicemessage is sent. The class of this object isDevice.",
        "canonicalPath": "live_set tracks N devices M",
        "Children": [],
        "Properties": [],
        "Functions": []
    }
]